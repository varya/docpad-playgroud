/* ../../node_modules/bem-techs-core/node_modules/ym/modules.js begin */
/**
 * Modules
 *
 * Copyright (c) 2013 Filatov Dmitry (dfilatov@yandex-team.ru)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * @version 0.0.9
 */

(function(global) {

var DECL_STATES = {
        NOT_RESOLVED : 'NOT_RESOLVED',
        IN_RESOLVING : 'IN_RESOLVING',
        RESOLVED     : 'RESOLVED'
    },

    curOptions = {
        trackCircularDependencies : true,
        allowMultipleDeclarations : true
    },

    undef,
    modulesStorage = {},
    declsToCalc = [],
    waitForNextTick = false,
    pendingRequires = [],

    /**
     * Defines module
     * @param {String} name
     * @param {String[]} [deps]
     * @param {Function} declFn
     */
    define = function(name, deps, declFn) {
        if(!declFn) {
            declFn = deps;
            deps = [];
        }

        var module = modulesStorage[name];
        if(module) {
            if(!curOptions.allowMultipleDeclarations) {
                throwMultipleDeclarationDetected(name);
                return;
            }
        }
        else {
            module = modulesStorage[name] = {
                name : name,
                decl : undef
            };
        }

        declsToCalc.push(module.decl = {
            name          : name,
            fn            : declFn,
            state         : DECL_STATES.NOT_RESOLVED,
            deps          : deps,
            prevDecl      : module.decl,
            dependOnDecls : [],
            dependents    : [],
            exports       : undef
        });
    },

    /**
     * Requires modules
     * @param {String[]} modules
     * @param {Function} cb
     */
    require = function(modules, cb) {
        if(!waitForNextTick) {
            waitForNextTick = true;
            nextTick(onNextTick);
        }

        pendingRequires.push({
            modules : modules,
            cb      : cb
        });
    },

    /**
     * Returns state of module
     * @param {String} name
     * @returns {String} state, possible values NOT_DEFINED, NOT_RESOLVED, IN_RESOLVING, RESOLVED
     */
    getState = function(name) {
        var module = modulesStorage[name];
        return module?
            DECL_STATES[module.decl.state] :
            'NOT_DEFINED';
    },

    /**
     * Returns whether the module is defined
     * @param {String} name
     * @returns {Boolean}
     */
    isDefined = function(name) {
        return !!modulesStorage[name];
    },

    /**
     * Sets options
     * @param {Object} options
     */
    setOptions = function(options) {
        for(var name in options) {
            if(options.hasOwnProperty(name)) {
                curOptions[name] = options[name];
            }
        }
    },

    onNextTick = function() {
        waitForNextTick = false;
        calcDeclDeps();
        applyRequires();
    },

    calcDeclDeps = function() {
        var i = 0, decl, j, dep, dependOnDecls;
        while(decl = declsToCalc[i++]) {
            j = 0;
            dependOnDecls = decl.dependOnDecls;
            while(dep = decl.deps[j++]) {
                if(!isDefined(dep)) {
                    throwModuleNotFound(dep, decl);
                    break;
                }
                dependOnDecls.push(modulesStorage[dep].decl);
            }

            if(decl.prevDecl) {
                dependOnDecls.push(decl.prevDecl);
                decl.prevDecl = undef;
            }
        }

        declsToCalc = [];
    },

    applyRequires = function() {
        var requiresToProcess = pendingRequires,
            require, i = 0, j, dep, dependOnDecls, applyCb;

        pendingRequires = [];

        while(require = requiresToProcess[i++]) {
            j = 0; dependOnDecls = []; applyCb = true;
            while(dep = require.modules[j++]) {
                if(!isDefined(dep)) {
                    throwModuleNotFound(dep);
                    applyCb = false;
                    break;
                }

                dependOnDecls.push(modulesStorage[dep].decl);
            }
            applyCb && applyRequire(dependOnDecls, require.cb);
        }
    },

    applyRequire = function(dependOnDecls, cb) {
        requireDecls(
            dependOnDecls,
            function(exports) {
                cb.apply(global, exports);
            },
            []);
    },

    requireDecls = function(decls, cb, path) {
        var unresolvedDeclCnt = decls.length,
            checkUnresolved = true;

        if(unresolvedDeclCnt) {
            var onDeclResolved = function() {
                    --unresolvedDeclCnt || onDeclsResolved(decls, cb);
                },
                i = 0, decl;

            while(decl = decls[i++]) {
                if(decl.state === DECL_STATES.RESOLVED) {
                    --unresolvedDeclCnt;
                }
                else {
                    if(curOptions.trackCircularDependencies && isDependenceCircular(decl, path)) {
                        throwCircularDependenceDetected(decl, path);
                    }

                    decl.state === DECL_STATES.NOT_RESOLVED && startDeclResolving(decl, path);

                    if(decl.state === DECL_STATES.RESOLVED) { // decl was resolved synchronously
                        --unresolvedDeclCnt;
                    }
                    else {
                        decl.dependents.push(onDeclResolved);
                        checkUnresolved = false;
                    }
                }
            }
        }

        if(checkUnresolved && !unresolvedDeclCnt) {
            onDeclsResolved(decls, cb);
        }
    },

    onDeclsResolved = function(decls, cb) {
        var exports = [],
            i = 0, decl;
        while(decl = decls[i++]) {
            exports.push(decl.exports);
        }
        cb(exports);
    },

    startDeclResolving = function(decl, path) {
        curOptions.trackCircularDependencies && (path = path.slice()).push(decl);
        decl.state = DECL_STATES.IN_RESOLVING;
        var isProvided = false;
        requireDecls(
            decl.dependOnDecls,
            function(depDeclsExports) {
                decl.fn.apply(
                    {
                        name   : decl.name,
                        deps   : decl.deps,
                        global : global
                    },
                    [function(exports) {
                        isProvided?
                            throwDeclAlreadyProvided(decl) :
                            isProvided = true;
                        provideDecl(decl, exports);
                        return exports;
                    }].concat(depDeclsExports));
            },
            path);
    },

    provideDecl = function(decl, exports) {
        decl.exports = exports;
        decl.state = DECL_STATES.RESOLVED;

        var i = 0, dependent;
        while(dependent = decl.dependents[i++]) {
            dependent(decl.exports);
        }

        decl.dependents = undef;
    },

    isDependenceCircular = function(decl, path) {
        var i = 0, pathDecl;
        while(pathDecl = path[i++]) {
            if(decl === pathDecl) {
                return true;
            }
        }
        return false;
    },

    throwException = function(e) {
        nextTick(function() {
            throw e;
        });
    },

    throwModuleNotFound = function(name, decl) {
        throwException(Error(
            decl?
                'Module "' + decl.name + '": can\'t resolve dependence "' + name + '"' :
                'Can\'t resolve required module "' + name + '"'));
    },

    throwCircularDependenceDetected = function(decl, path) {
        var strPath = [],
            i = 0, pathDecl;
        while(pathDecl = path[i++]) {
            strPath.push(pathDecl.name);
        }
        strPath.push(decl.name);

        throwException(Error('Circular dependence detected "' + strPath.join(' -> ') + '"'));
    },

    throwDeclAlreadyProvided = function(decl) {
        throwException(Error('Declaration of module "' + decl.name + '" already provided'));
    },

    throwMultipleDeclarationDetected = function(name) {
        throwException(Error('Multiple declaration of module "' + name + '" detected'));
    },

    nextTick = (function() {
        var fns = [],
            enqueueFn = function(fn) {
                return fns.push(fn) === 1;
            },
            callFns = function() {
                var fnsToCall = fns, i = 0, len = fns.length;
                fns = [];
                while(i < len) {
                    fnsToCall[i++]();
                }
            };

        if(typeof process === 'object' && process.nextTick) { // nodejs
            return function(fn) {
                enqueueFn(fn) && process.nextTick(callFns);
            };
        }

        if(global.setImmediate) { // ie10
            return function(fn) {
                enqueueFn(fn) && global.setImmediate(callFns);
            };
        }

        if(global.postMessage) { // modern browsers
            var isPostMessageAsync = true;
            if(global.attachEvent) {
                var checkAsync = function() {
                        isPostMessageAsync = false;
                    };
                global.attachEvent('onmessage', checkAsync);
                global.postMessage('__checkAsync', '*');
                global.detachEvent('onmessage', checkAsync);
            }

            if(isPostMessageAsync) {
                var msg = '__modules' + (+new Date()),
                    onMessage = function(e) {
                        if(e.data === msg) {
                            e.stopPropagation && e.stopPropagation();
                            callFns();
                        }
                    };

                global.addEventListener?
                    global.addEventListener('message', onMessage, true) :
                    global.attachEvent('onmessage', onMessage);

                return function(fn) {
                    enqueueFn(fn) && global.postMessage(msg, '*');
                };
            }
        }

        var doc = global.document;
        if('onreadystatechange' in doc.createElement('script')) { // ie6-ie8
            var createScript = function() {
                    var script = doc.createElement('script');
                    script.onreadystatechange = function() {
                        script.parentNode.removeChild(script);
                        script = script.onreadystatechange = null;
                        callFns();
                };
                (doc.documentElement || doc.body).appendChild(script);
            };

            return function(fn) {
                enqueueFn(fn) && createScript();
            };
        }

        return function(fn) { // old browsers
            enqueueFn(fn) && setTimeout(callFns, 0);
        };
    })(),

    api = {
        define     : define,
        require    : require,
        getState   : getState,
        isDefined  : isDefined,
        setOptions : setOptions
    };

if(typeof exports === 'object') {
    module.exports = api;
}
else {
    global.modules = api;
}

})(this);

/* ../../node_modules/bem-techs-core/node_modules/ym/modules.js end */
;
/* ../../desktop.blocks/grid/grid.js begin */

(function() {

    (/grid=?/).test(window.location.search) ?
        $('body').append('<div class="grid"></div>') :
        false;

})();

/* ../../desktop.blocks/grid/grid.js end */
;
/* ../../desktop.blocks/fonts/fonts.js begin */
/** @requires BEM */
/* http://stackoverflow.com/questions/16253429/saving-a-css-web-font-in-html5-local-storage */

modules.define(
    { block: 'fonts' },
    ['jquery'],
    function(provide, $) {

$(function(){

    /* For storage only */
    if (typeof(Storage) === 'undefined') {
        return;
    }
    if (localStorage.getItem('varya.me.fonts') === null) {

        $.ajax({
            url: '/*borschik:link:../../data/fonts.css',
            success: function(response){
                localStorage.setItem('varya.me.fonts', response);
            },
            dataType: 'text'
        });

    }

});

});

modules.require(['fonts'], function(){});

/* ../../desktop.blocks/fonts/fonts.js end */
;
/* ../../desktop.blocks/candies/candies.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define(
    { block: 'candies' },
    function(provide) {

provide({

    onSetMod : {

        'js' : {

            'inited' : function() {

                var width = this.domElem.width(),
                    p = this.params,
                    candies = [],
                    i = 0,
                    colorIndex = this.__self.stopPoint,
                    initSize = 6,
                    rt = 6,
                    newSize = function(max, min) {
                        return Math.round(Math.random()*(max - min) + min);
                    }

                while(width > 2*rt) {

                    if (initSize < p.size.min) {
                        size = newSize(initSize, initSize);
                        initSize = initSize + 2;
                    } else {
                        size = newSize(p.size.max, p.size.min);
                    }
                    if (size > width - 2*rt) size = width - 2*rt;
                    bt = Math.round(Math.sin(i/2.5 + 1.5)*p.size.max*0.9/2);
                    //bt = Math.round(Math.sin(i/2.5)*p.size.max*0.9/Math.sqrt(i));

                    lastSize = size;
                    width = width - size - rt;
                    candies.push('<b alt="' + i + '" class="candies_i" style="width:' + size + 'px; height:' + size + 'px; background:#' + this.__self.colors[colorIndex] +';margin: auto ' + rt + 'px ' + bt + 'px 0"></b>');
                    i++;
                    colorIndex++;
                    if (!this.__self.colors[colorIndex]) {
                        colorIndex = 0;
                    }
                }
                this.__self.stopPoint = colorIndex;
                if (p.reverse) { candies.reverse(); }
                this.domElem.append('<b>' + candies.join('') + '</b>');
            }
        }

    }

}, {
    colors: [
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'd24d33',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        '72664e',
        'ccd600',
        'fffbdb',
        'df620e',
        '993838',
        'ff9600',
        'd24d33',
        '8960a7',
        '82b964',
        'f87aa0',
        'd43f3f',
        '668000',
        'ff9600',
        '8960a7',
        'c9c9c9',
        '993838',
        'CCD600',
        '668000',
        'f4cc13',
        '72664e',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9'
    ],
    stopPoint: 0

});

});

/* ../../desktop.blocks/candies/candies.js end */
;
/* ../../desktop.blocks/colors/colors.js begin */
/** @requires BEM */

modules.define('colors', function(provide) {

var lastIndex;

var colors = {

    getRandomColor: function() {
        var clrs = this.colorBase;
        return clrs[Math.floor(Math.random()*clrs.length)];
    },

    getNextColor: function() {
        return this.colorBase[this.getLastIndex()];
    },

    getLastIndex: function() {
        var clrs = this.colorBase;
        lastIndex = lastIndex + 1 || Math.floor(Math.random()*clrs.length);
        if (lastIndex == clrs.length) {
            lastIndex = 0;
        }
        return lastIndex;
    },

    colorBase: [
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'd24d33',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        '72664e',
        'ccd600',
        'fffbdb',
        'df620e',
        '993838',
        'ff9600',
        'd24d33',
        '8960a7',
        '82b964',
        'f87aa0',
        'd43f3f',
        '668000',
        'ff9600',
        '8960a7',
        'c9c9c9',
        '993838',
        'CCD600',
        '668000',
        'f4cc13',
        '72664e',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9'
        ]

};

provide(colors);

});

/* ../../desktop.blocks/colors/colors.js end */
;
/* ../../desktop.blocks/recent-posts/recent-posts.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define(
    { block: 'recent-posts' },
    ['jquery', 'colors'],
    function(provide, $, colors) {

provide({

    onSetMod : {

        'js' : {

            'inited' : function() {

                this.elem('date').each(function(i, elem){
                    var clr = colors.getNextColor();
                    $(elem).css('background-color', '#' + clr);
                });

            }
        }

    }

});

});

/* ../../desktop.blocks/recent-posts/recent-posts.js end */
;
/* ../../desktop.blocks/github/__jquery/github__jquery.js begin */
//
// Source: http://www.joepettersson.com/demo/jquery-github-widget/
//
//
modules.define(
    { block: 'github__jquery' },
    ['jquery'],
    function(provide, $) {

provide(function ($, window, document, undefined) {
	"use strict";
	// Setup our defaults
	var pluginName = 'github',
		defaults = {
			user: "joepettersson",
			show_extended_info: true,
			show_follows: true,
			width: "400px",
			show_repos: 10,
			oldest_first: false
		};

	// The plugin constructor
	function Github(element, options) {
		// Set the element specified by the user
		this.element = element;
		// Combie in the defaults and options into a single options object
		this.options = $.extend({}, defaults, options);
		// Instantiate our init function, it inherits the options object, so we don't need to explicitly pass it
		this.init();

		this.errorType = '';
	}

	// Our Prototype!
	Github.prototype = {
		// Our controller
		init: function () {
			// Explicitly set our options and element so they can be inherited by functions
			// Then init our functions to build the widget
			var el = this.element,
				options = this.options,
				user = this.model("user", options.user, function (data) {
					// Build layout view with user data and append it to the specified element
					$(el).append(Github.prototype.view_layout(data.data, options));
				}),
				repos = this.model("repos", options.user, function (data) {
					// Build our repos partial and append it to the layout, which is already in the DOM
					$(el).find("#ghw-repos ul").append(Github.prototype.view_partial_repos(data, options, el));
					// Fade out the Github loader gif, and then fade in the repos we just appended
					$(el).find("#ghw-repos #ghw-github-loader").slideUp(250, function () {
						$(el).find("#ghw-repos ul").slideDown(250);
					});
					// Init our bind function once everything is present within the DOM
					Github.prototype.bind(options);
				});
		},

		// Our user model, get and set user data
		model: function (type, user, callback) {
			// Construct our endpoint URL depending on what is being requested
			var url = "https://api.github.com/users/" + user.toLowerCase(); if (type === "repos") { url += "/repos"; } url += "?callback=?";
			// Get data from Github user endpoint, JSONP bitches
			$.getJSON(url, function (data) {
				// Make sure our callback is defined and is of the right type, if it is fire it
				if (typeof callback !== "undefined" && typeof callback === "function") {
					callback(data);
				}
			});
		},

		// The main layout for the widget
		view_layout: function (user, options) {
			var markup = '';
			// As it's setting a simple string, the width value can be anything acceptable to CSS (px/%/em/pt etc)
			markup += '<div id="ghw-github" style="width: ' + options.width + '">';
			markup += '<div id="ghw-header" class="ghw-clear">';
			markup += '<div id="ghw-user"><a href="' + user.html_url + '" id="ghw-github-user">';
			// If the user has a custom avatar then show it, if not display the default github avatar (served from their CDN)
			if (typeof user.avatar_url !== "undefined" && user.avatar_url.length > 0) {
				//markup += '<img src="' + user.avatar_url + '" alt="Avatar" width="34px" height="34px" />';
				markup += '<b style="background-image:url(' + user.avatar_url + ');"></b>';
			} else {
				markup += '<img src="https://a248.e.akamai.net/assets.github.com/images/gravatars/gravatar-140.png" alt="Avatar" width="34px" height="34px" />';
			}
			markup += '</a></div>';
			// Check if we should show the extended info, a custom option
			// Within extended info we need to check for the existence of elements, as not everyone has the same info set in their Github profile
			if (options.show_extended_info === true) {
				markup += '<div id="ghw-extended-user-info">';
				if (user.name && user.name.length) {
					markup += '<p class="ghw-name">' + user.name + '</p>';
				}
				markup += '<p class="ghw-place">';
				if (user.company && user.company.length) {
					markup += user.company + ' ';
				}
				if (user.location && user.location.length) {
					markup += user.location;
				}
				markup += '</p>';
				if (typeof user.bio === "string" && user.bio.length > 0) {
					markup += '<p class="ghw-bio">' + user.bio + '</p>';
				}
				if (user.hireable === true) {
					markup += '<p class="ghw-hireable">I\'m availabe for hire!</p>';
				}
				markup += '<span class="ghw-repos">' + user.public_repos + ' repos</span>';
				markup += '<span class="ghw-gists">' + user.public_gists + ' gists</span>';
				markup += '</div>';
			}
			markup += '<div id="ghw-github-user-data">';
			markup += '<h2><a href="' + user.html_url + '">';
			if (typeof user.login !== "undefined") {
				markup += user.login;
			} else {
				markup += 'User not found';
			}
			markup += '</a></h2>';
			markup += '<a href="' + user.html_url + '" id="ghw-header-total-repos">' + user.public_repos + ' repos</a>';
			// Check if the option to show followers is set to true, if not, don't show it
			if (options.show_follows === true && typeof user.login !== "undefined") {
				markup += ' | <a href="https://github.com/' + user.login.toLowerCase() + '/followers" id="ghw-current-followers">' + user.followers + ' followers</a>';
			}
			markup += '</div>';
			markup += '</div>';
			// The element which the repos partial will eventually be appended to
			markup += '<div id="ghw-repos"><div id="ghw-github-loader"></div><ul></ul></div>';
			markup += '</div>';
			return markup;
		},

		// Our repos partial, which will construct the repo list itself
		view_partial_repos: function (data, options, el) {
			var markup = '';
			// Are we displaying our repos oldest first?
			if (options.oldest_first === true) {
				// Yes? use the reverse method to reverse the order of the data objects
				data = data.data.reverse();
			} else {
				data = data.data;
			}
			// Iterate through the repos
			$.each(data, function (i) {
				// Github returns pages of 30 repos per request, however we only want to show the number set in the options
				if (i <= options.show_repos - 1) {
					markup += '<li id="ghw-repo-' + i + '" class="ghw-clear ghw-repo';
					// This is a little bit of a hack to make the CSS easier, if the repo has a language attribute, it will mean
					// the box carries over two lines, which means the buttons on the right become missaligned. So therefore, if
					// there are two lines, add a special class so we can style it more easily.
					if (this.language !== null) {
						markup += ' double';
					}
					markup += '">';
					markup += '<div class="ghw-left">';
					markup += '<p class="ghw-title"><a href="' + this.html_url + '" data-description="<p>' + this.name + '</p>' + this.description + '" class="ghw-github-tooltip">' + this.name + '</a></p>';
					markup += '<p class="ghw-meta-data">';
					if (this.language !== null) {
						markup += '<span class="ghw-language">' + this.language + '</span></p>';
					}
					markup += '</div>';
					markup += '<div class="ghw-right">';
					markup += '<span class="ghw-forks ghw-github-tooltip" data-description="This repo has ' + this.forks + ' fork(s)">' + this.forks + '</span>';
					markup += '<span class="ghw-watchers ghw-github-tooltip" data-description="This repo has ' + this.watchers + ' watcher(s)">' + this.watchers + '</span>';
					markup += '<span class="ghw-issues ghw-github-tooltip" data-description="This project has ' + this.open_issues + ' open issues">' + this.open_issues + '</span>';
					markup += '</div>';
					markup += '</li>';
				}
			});
			return markup;
		},

		// Our bin utility funciton that will be init'd once we have populated the DOM
		bind: function (options) {
			// If the option to show the extended user info is set to true then bind it to do so
			if (options.show_extended_info === true) {
				$("#ghw-github-user").hover(function () {
					$("#ghw-github #ghw-header #ghw-extended-user-info").fadeIn(250, function () {
						$("#ghw-github #ghw-header img").addClass("ghw-ghw-no-bottom-border");
					});
				}, function () {
					$("#ghw-github #ghw-header #ghw-extended-user-info").fadeOut(250, function () {
						$("#ghw-github #ghw-header img").removeClass("ghw-ghw-no-bottom-border");
					});
				});
			}
			// Make the buttons become opaque when hovering over a repo row
			$("#ghw-github li").hover(function () {
				$(this).find(".ghw-right").animate({opacity: 1}, 200);
			}, function () {
				$(this).find(".ghw-right").animate({opacity: 0.3}, 200);
			});
			// Our main tooltip function
			$(".ghw-github-tooltip").hover(function () {
				var markup = '<div class="ghw-github-tooltip-content">' + $(this).attr("data-description") + '</div>';
				$(this).append(markup);
			}, function () {
				$(".ghw-github-tooltip-content").remove();
			});
		}
	};

	// Setup our plugin
	$.fn[pluginName] = function (options) {
		return this.each(function () {
			if (!$.data(this, 'plugin_' + pluginName)) {
				$.data(this, 'plugin_' + pluginName,
					new Github(this, options));
			}
		});
	};

}($, window, document));

});

/* ../../desktop.blocks/github/__jquery/github__jquery.js end */
;
/* ../../desktop.blocks/github/github.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define(
    { block: 'github' },
    function(provide) {

provide({

    onSetMod : {

        'js' : {
            'inited' :function() {
                this.elem('body').github({
                    user: this.params.user,
                    show_repos: 5,
                    show_extended_info: false,
                    show_follows: false,
                    oldest_first: false,
                    width: '100%'
                });
            }
        }

    }

});

});

/* ../../desktop.blocks/github/github.js end */
;
(function(g) {

  var __xjst = (function(exports) {

     var __$ref={};function apply(ctx){try{return applyc(ctx||this,__$ref)}catch(e){(ctx||this).xjstContext=e;throw e}}exports.apply=apply;function applyc(__$ctx,__$ref){__$ctx.__$a=0}[].forEach(function(fn){fn(exports,this)},{recordExtensions:function(ctx){}});;
     return exports;
  })({});
  var defineAsGlobal = true;
  if(typeof exports === "object") {
    exports["BEMHTML"] = __xjst;
    defineAsGlobal = false;
  }
  if(typeof modules === "object") {
    modules.define("BEMHTML", function(provide) { provide(__xjst) });
    defineAsGlobal = false;
  }
  defineAsGlobal && (g["BEMHTML"] = __xjst);
})(this);
