/* ../../node_modules/bem-techs-core/node_modules/ym/modules.js begin */
/**
 * Modules
 *
 * Copyright (c) 2013 Filatov Dmitry (dfilatov@yandex-team.ru)
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * @version 0.0.9
 */

(function(global) {

var DECL_STATES = {
        NOT_RESOLVED : 'NOT_RESOLVED',
        IN_RESOLVING : 'IN_RESOLVING',
        RESOLVED     : 'RESOLVED'
    },

    curOptions = {
        trackCircularDependencies : true,
        allowMultipleDeclarations : true
    },

    undef,
    modulesStorage = {},
    declsToCalc = [],
    waitForNextTick = false,
    pendingRequires = [],

    /**
     * Defines module
     * @param {String} name
     * @param {String[]} [deps]
     * @param {Function} declFn
     */
    define = function(name, deps, declFn) {
        if(!declFn) {
            declFn = deps;
            deps = [];
        }

        var module = modulesStorage[name];
        if(module) {
            if(!curOptions.allowMultipleDeclarations) {
                throwMultipleDeclarationDetected(name);
                return;
            }
        }
        else {
            module = modulesStorage[name] = {
                name : name,
                decl : undef
            };
        }

        declsToCalc.push(module.decl = {
            name          : name,
            fn            : declFn,
            state         : DECL_STATES.NOT_RESOLVED,
            deps          : deps,
            prevDecl      : module.decl,
            dependOnDecls : [],
            dependents    : [],
            exports       : undef
        });
    },

    /**
     * Requires modules
     * @param {String[]} modules
     * @param {Function} cb
     */
    require = function(modules, cb) {
        if(!waitForNextTick) {
            waitForNextTick = true;
            nextTick(onNextTick);
        }

        pendingRequires.push({
            modules : modules,
            cb      : cb
        });
    },

    /**
     * Returns state of module
     * @param {String} name
     * @returns {String} state, possible values NOT_DEFINED, NOT_RESOLVED, IN_RESOLVING, RESOLVED
     */
    getState = function(name) {
        var module = modulesStorage[name];
        return module?
            DECL_STATES[module.decl.state] :
            'NOT_DEFINED';
    },

    /**
     * Returns whether the module is defined
     * @param {String} name
     * @returns {Boolean}
     */
    isDefined = function(name) {
        return !!modulesStorage[name];
    },

    /**
     * Sets options
     * @param {Object} options
     */
    setOptions = function(options) {
        for(var name in options) {
            if(options.hasOwnProperty(name)) {
                curOptions[name] = options[name];
            }
        }
    },

    onNextTick = function() {
        waitForNextTick = false;
        calcDeclDeps();
        applyRequires();
    },

    calcDeclDeps = function() {
        var i = 0, decl, j, dep, dependOnDecls;
        while(decl = declsToCalc[i++]) {
            j = 0;
            dependOnDecls = decl.dependOnDecls;
            while(dep = decl.deps[j++]) {
                if(!isDefined(dep)) {
                    throwModuleNotFound(dep, decl);
                    break;
                }
                dependOnDecls.push(modulesStorage[dep].decl);
            }

            if(decl.prevDecl) {
                dependOnDecls.push(decl.prevDecl);
                decl.prevDecl = undef;
            }
        }

        declsToCalc = [];
    },

    applyRequires = function() {
        var requiresToProcess = pendingRequires,
            require, i = 0, j, dep, dependOnDecls, applyCb;

        pendingRequires = [];

        while(require = requiresToProcess[i++]) {
            j = 0; dependOnDecls = []; applyCb = true;
            while(dep = require.modules[j++]) {
                if(!isDefined(dep)) {
                    throwModuleNotFound(dep);
                    applyCb = false;
                    break;
                }

                dependOnDecls.push(modulesStorage[dep].decl);
            }
            applyCb && applyRequire(dependOnDecls, require.cb);
        }
    },

    applyRequire = function(dependOnDecls, cb) {
        requireDecls(
            dependOnDecls,
            function(exports) {
                cb.apply(global, exports);
            },
            []);
    },

    requireDecls = function(decls, cb, path) {
        var unresolvedDeclCnt = decls.length,
            checkUnresolved = true;

        if(unresolvedDeclCnt) {
            var onDeclResolved = function() {
                    --unresolvedDeclCnt || onDeclsResolved(decls, cb);
                },
                i = 0, decl;

            while(decl = decls[i++]) {
                if(decl.state === DECL_STATES.RESOLVED) {
                    --unresolvedDeclCnt;
                }
                else {
                    if(curOptions.trackCircularDependencies && isDependenceCircular(decl, path)) {
                        throwCircularDependenceDetected(decl, path);
                    }

                    decl.state === DECL_STATES.NOT_RESOLVED && startDeclResolving(decl, path);

                    if(decl.state === DECL_STATES.RESOLVED) { // decl was resolved synchronously
                        --unresolvedDeclCnt;
                    }
                    else {
                        decl.dependents.push(onDeclResolved);
                        checkUnresolved = false;
                    }
                }
            }
        }

        if(checkUnresolved && !unresolvedDeclCnt) {
            onDeclsResolved(decls, cb);
        }
    },

    onDeclsResolved = function(decls, cb) {
        var exports = [],
            i = 0, decl;
        while(decl = decls[i++]) {
            exports.push(decl.exports);
        }
        cb(exports);
    },

    startDeclResolving = function(decl, path) {
        curOptions.trackCircularDependencies && (path = path.slice()).push(decl);
        decl.state = DECL_STATES.IN_RESOLVING;
        var isProvided = false;
        requireDecls(
            decl.dependOnDecls,
            function(depDeclsExports) {
                decl.fn.apply(
                    {
                        name   : decl.name,
                        deps   : decl.deps,
                        global : global
                    },
                    [function(exports) {
                        isProvided?
                            throwDeclAlreadyProvided(decl) :
                            isProvided = true;
                        provideDecl(decl, exports);
                        return exports;
                    }].concat(depDeclsExports));
            },
            path);
    },

    provideDecl = function(decl, exports) {
        decl.exports = exports;
        decl.state = DECL_STATES.RESOLVED;

        var i = 0, dependent;
        while(dependent = decl.dependents[i++]) {
            dependent(decl.exports);
        }

        decl.dependents = undef;
    },

    isDependenceCircular = function(decl, path) {
        var i = 0, pathDecl;
        while(pathDecl = path[i++]) {
            if(decl === pathDecl) {
                return true;
            }
        }
        return false;
    },

    throwException = function(e) {
        nextTick(function() {
            throw e;
        });
    },

    throwModuleNotFound = function(name, decl) {
        throwException(Error(
            decl?
                'Module "' + decl.name + '": can\'t resolve dependence "' + name + '"' :
                'Can\'t resolve required module "' + name + '"'));
    },

    throwCircularDependenceDetected = function(decl, path) {
        var strPath = [],
            i = 0, pathDecl;
        while(pathDecl = path[i++]) {
            strPath.push(pathDecl.name);
        }
        strPath.push(decl.name);

        throwException(Error('Circular dependence detected "' + strPath.join(' -> ') + '"'));
    },

    throwDeclAlreadyProvided = function(decl) {
        throwException(Error('Declaration of module "' + decl.name + '" already provided'));
    },

    throwMultipleDeclarationDetected = function(name) {
        throwException(Error('Multiple declaration of module "' + name + '" detected'));
    },

    nextTick = (function() {
        var fns = [],
            enqueueFn = function(fn) {
                return fns.push(fn) === 1;
            },
            callFns = function() {
                var fnsToCall = fns, i = 0, len = fns.length;
                fns = [];
                while(i < len) {
                    fnsToCall[i++]();
                }
            };

        if(typeof process === 'object' && process.nextTick) { // nodejs
            return function(fn) {
                enqueueFn(fn) && process.nextTick(callFns);
            };
        }

        if(global.setImmediate) { // ie10
            return function(fn) {
                enqueueFn(fn) && global.setImmediate(callFns);
            };
        }

        if(global.postMessage) { // modern browsers
            var isPostMessageAsync = true;
            if(global.attachEvent) {
                var checkAsync = function() {
                        isPostMessageAsync = false;
                    };
                global.attachEvent('onmessage', checkAsync);
                global.postMessage('__checkAsync', '*');
                global.detachEvent('onmessage', checkAsync);
            }

            if(isPostMessageAsync) {
                var msg = '__modules' + (+new Date()),
                    onMessage = function(e) {
                        if(e.data === msg) {
                            e.stopPropagation && e.stopPropagation();
                            callFns();
                        }
                    };

                global.addEventListener?
                    global.addEventListener('message', onMessage, true) :
                    global.attachEvent('onmessage', onMessage);

                return function(fn) {
                    enqueueFn(fn) && global.postMessage(msg, '*');
                };
            }
        }

        var doc = global.document;
        if('onreadystatechange' in doc.createElement('script')) { // ie6-ie8
            var createScript = function() {
                    var script = doc.createElement('script');
                    script.onreadystatechange = function() {
                        script.parentNode.removeChild(script);
                        script = script.onreadystatechange = null;
                        callFns();
                };
                (doc.documentElement || doc.body).appendChild(script);
            };

            return function(fn) {
                enqueueFn(fn) && createScript();
            };
        }

        return function(fn) { // old browsers
            enqueueFn(fn) && setTimeout(callFns, 0);
        };
    })(),

    api = {
        define     : define,
        require    : require,
        getState   : getState,
        isDefined  : isDefined,
        setOptions : setOptions
    };

if(typeof exports === 'object') {
    module.exports = api;
}
else {
    global.modules = api;
}

})(this);

/* ../../node_modules/bem-techs-core/node_modules/ym/modules.js end */
;
/* ../../desktop.blocks/highlight/__hack/highlight__hack.js begin */
modules.require(['jquery'], function($) {

    $(function(){
        $('.highlight').each(function(i, block){
            var $block = $(block);
            $block.addClass('i-bem').addClass('highlight_theme_solarized-light');
            $block.attr('data-bem', JSON.stringify({ highlight: {} }));
        });
    })

});

/* ../../desktop.blocks/highlight/__hack/highlight__hack.js end */
;
/* ../../libs/bem-core/common.blocks/i-bem/__dom/i-bem__dom.js begin */
/**
 * @module i-bem__dom
 */

modules.define(
    'i-bem__dom',
    ['i-bem', 'i-bem__internal', 'identify', 'objects', 'functions', 'jquery', 'dom'],
    function(provide, BEM, INTERNAL, identify, objects, functions, $, dom) {

var undef,
    win = $(window),
    doc = $(document),

/**
 * Storage for DOM elements by unique key
 * @private
 * @type Object
 */
    uniqIdToDomElems = {},

/**
 * Storage for blocks by unique key
 * @static
 * @private
 * @type Object
 */
    uniqIdToBlock = {},

/**
 * Storage for block parameters
 * @private
 * @type Object
 */
    domElemToParams = {},

/**
 * Storage for liveCtx event handlers
 * @private
 * @type Object
 */
    liveEventCtxStorage = {},

/**
 * Storage for liveClass event handlers
 * @private
 * @type Object
 */
    liveClassEventStorage = {},

    blocks = BEM.blocks,

    BEM_CLASS = 'i-bem',
    BEM_SELECTOR = '.' + BEM_CLASS,
    BEM_PARAMS_ATTR = 'data-bem',

    NAME_PATTERN = INTERNAL.NAME_PATTERN,

    MOD_DELIM = INTERNAL.MOD_DELIM,
    ELEM_DELIM = INTERNAL.ELEM_DELIM,

    EXTRACT_MODS_RE = RegExp(
        '[^' + MOD_DELIM + ']' + MOD_DELIM + '(' + NAME_PATTERN + ')' +
        '(?:' + MOD_DELIM + '(' + NAME_PATTERN + '))?$'),

    buildModPostfix = INTERNAL.buildModPostfix,
    buildClass = INTERNAL.buildClass;

/**
 * Initializes blocks on a DOM element
 * @private
 * @param {jQuery} domElem DOM element
 * @param {String} uniqInitId ID of the "initialization wave"
 */
function init(domElem, uniqInitId) {
    var domNode = domElem[0],
        params = getParams(domNode),
        blockName, blockParams;

    for(blockName in params) {
        if(params.hasOwnProperty(blockName)) {
            blockParams = params[blockName];
            processParams(blockParams, domNode, blockName, uniqInitId);
            var block = uniqIdToBlock[blockParams.uniqId];
            if(block) {
                if(block.domElem.index(domNode) < 0) {
                    block.domElem = block.domElem.add(domElem);
                    objects.extend(block._params, blockParams);
                }
            } else {
                initBlock(blockName, domElem, blockParams);
            }
        }
    }
}

/**
 * Initializes a specific block on a DOM element, or returns the existing block if it was already created
 * @private
 * @param {String} blockName Block name
 * @param {jQuery} domElem DOM element
 * @param {Object} [params] Initialization parameters
 * @param {Boolean} [forceLive] Force live initialization
 * @param {Function} [callback] Handler to call after complete initialization
 */
function initBlock(blockName, domElem, params, forceLive, callback) {
    if(typeof params === 'boolean') {
        callback = forceLive;
        forceLive = params;
        params = undef;
    }

    var domNode = domElem[0];
    params = processParams(params || getParams(domNode)[blockName], domNode, blockName);

    var uniqId = params.uniqId;
    if(uniqIdToBlock[uniqId]) {
        return uniqIdToBlock[uniqId]._init();
    }

    uniqIdToDomElems[uniqId] = uniqIdToDomElems[uniqId]?
        uniqIdToDomElems[uniqId].add(domElem) :
        domElem;

    var parentDomNode = domNode.parentNode;
    if(!parentDomNode || parentDomNode.nodeType === 11) { // jquery doesn't unique disconnected node
        $.unique(uniqIdToDomElems[uniqId]);
    }

    var blockClass = blocks[blockName] || DOM.decl(blockName, {}, { live : true }, true);
    if(!(blockClass._liveInitable = !!blockClass._processLive()) || forceLive || params.live === false) {
        forceLive && domElem.addClass(BEM_CLASS); // add css class for preventing memory leaks in further destructing

        var block = new blockClass(uniqIdToDomElems[uniqId], params, !!forceLive);
        delete uniqIdToDomElems[uniqId];
        callback && callback.apply(block, Array.prototype.slice.call(arguments, 4));
        return block;
    }
}

/**
 * Processes and adds necessary block parameters
 * @private
 * @param {Object} params Initialization parameters
 * @param {HTMLElement} domNode DOM node
 * @param {String} blockName Block name
 * @param {String} [uniqInitId] ID of the "initialization wave"
 */
function processParams(params, domNode, blockName, uniqInitId) {
    (params || (params = {})).uniqId ||
        (params.uniqId = (params.id? blockName + '-id-' + params.id : identify()) + (uniqInitId || identify()));

    var domUniqId = identify(domNode),
        domParams = domElemToParams[domUniqId] || (domElemToParams[domUniqId] = {});

    domParams[blockName] || (domParams[blockName] = params);

    return params;
}

/**
 * Helper for searching for a DOM element using a selector inside the context, including the context itself
 * @private
 * @param {jQuery} ctx Context
 * @param {String} selector CSS selector
 * @param {Boolean} [excludeSelf=false] Exclude context from search
 * @returns {jQuery}
 */
function findDomElem(ctx, selector, excludeSelf) {
    var res = ctx.find(selector);
    return excludeSelf?
       res :
       res.add(ctx.filter(selector));
}

/**
 * Returns parameters of a block's DOM element
 * @private
 * @param {HTMLElement} domNode DOM node
 * @returns {Object}
 */
function getParams(domNode) {
    var uniqId = identify(domNode);
    return domElemToParams[uniqId] ||
       (domElemToParams[uniqId] = extractParams(domNode));
}

/**
 * Retrieves block parameters from a DOM element
 * @private
 * @param {HTMLElement} domNode DOM node
 * @returns {Object}
 */
function extractParams(domNode) {
    var attrVal = domNode.getAttribute(BEM_PARAMS_ATTR);
    return attrVal? JSON.parse(attrVal) : {};
}

/**
 * Uncouple DOM node from the block. If this is the last node, then destroys the block.
 * @private
 * @param {DOM} block block
 * @param {HTMLElement} domNode DOM node
 */
function removeDomNodeFromBlock(block, domNode) {
    block.domElem.length === 1?
        block._destruct(true) :
        block.domElem = block.domElem.not(domNode);
}

var DOM = BEM.decl('i-bem__dom',/** @lends DOM.prototype */{
    /**
     * @class Base block for creating BEM blocks that have DOM representation
     * @constructs
     * @private
     * @param {jQuery} domElem DOM element that the block is created on
     * @param {Object} params Block parameters
     * @param {Boolean} [initImmediately=true]
     */
    __constructor : function(domElem, params, initImmediately) {
        /**
         * Block's DOM elements
         * @protected
         * @type jQuery
         */
        this.domElem = domElem;

        /**
         * Cache for names of events on DOM elements
         * @private
         * @type Object
         */
        this._eventNameCache = {};

        /**
         * Cache for elements
         * @private
         * @type Object
         */
        this._elemCache = {};

        /**
         * Unique block ID
         * @private
         * @type String
         */
        uniqIdToBlock[this._uniqId = params.uniqId || identify(this)] = this;

        /**
         * Flag for whether it's necessary to unbind from the document and window when destroying the block
         * @private
         * @type Boolean
         */
        this._needSpecialUnbind = false;

        this.__base(null, params, initImmediately);
    },

    /**
     * Finds blocks inside the current block or its elements (including context)
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM[]}
     */
    findBlocksInside : function(elem, block) {
        return this._findBlocks('find', elem, block);
    },

    /**
     * Finds the first block inside the current block or its elements (including context)
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM}
     */
    findBlockInside : function(elem, block) {
        return this._findBlocks('find', elem, block, true);
    },

    /**
     * Finds blocks outside the current block or its elements (including context)
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM[]}
     */
    findBlocksOutside : function(elem, block) {
        return this._findBlocks('parents', elem, block);
    },

    /**
     * Finds the first block outside the current block or its elements (including context)
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM}
     */
    findBlockOutside : function(elem, block) {
        return this._findBlocks('closest', elem, block)[0] || null;
    },

    /**
     * Finds blocks on DOM elements of the current block or its elements
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM[]}
     */
    findBlocksOn : function(elem, block) {
        return this._findBlocks('', elem, block);
    },

    /**
     * Finds the first block on DOM elements of the current block or its elements
     * @protected
     * @param {String|jQuery} [elem] Block element
     * @param {String|Object} block Name or description (block,modName,modVal) of the block to find
     * @returns {BEM}
     */
    findBlockOn : function(elem, block) {
        return this._findBlocks('', elem, block, true);
    },

    _findBlocks : function(select, elem, block, onlyFirst) {
        if(!block) {
            block = elem;
            elem = undef;
        }

        var ctxElem = elem?
                (typeof elem === 'string'? this.findElem(elem) : elem) :
                this.domElem,
            isSimpleBlock = typeof block === 'string',
            blockName = isSimpleBlock? block : (block.block || block.blockName),
            selector = '.' +
                (isSimpleBlock?
                    buildClass(blockName) :
                    buildClass(blockName, block.modName, block.modVal)) +
                (onlyFirst? ':first' : ''),
            domElems = ctxElem.filter(selector);

        select && (domElems = domElems.add(ctxElem[select](selector)));

        if(onlyFirst) {
            return domElems[0]? initBlock(blockName, domElems.eq(0), true) : null;
        }

        var res = [],
            uniqIds = {};

        domElems.each(function(i, domElem) {
            var block = initBlock(blockName, $(domElem), true);
            if(!uniqIds[block._uniqId]) {
                uniqIds[block._uniqId] = true;
                res.push(block);
            }
        });

        return res;
    },

    /**
     * Adds an event handler for any DOM element
     * @protected
     * @param {jQuery} domElem DOM element where the event will be listened for
     * @param {String|Object} event Event name or event object
     * @param {Function} fn Handler function, which will be executed in the block's context
     * @returns {BEM}
     */
    bindToDomElem : function(domElem, event, fn) {
        fn?
            domElem.bind(
                this._buildEventName(event),
                $.proxy(fn, this)) :
            objects.each(event, function(fn, event) {
                this.bindToDomElem(domElem, event, fn);
            }, this);

        return this;
    },

    /**
     * Adds an event handler to the document
     * @protected
     * @param {String} event Event name
     * @param {Function} fn Handler function, which will be executed in the block's context
     * @returns {BEM}
     */
    bindToDoc : function(event, fn) {
        this._needSpecialUnbind = true;
        return this.bindToDomElem(doc, event, fn);
    },

    /**
     * Adds an event handler to the window
     * @protected
     * @param {String} event Event name
     * @param {Function} fn Handler function, which will be executed in the block's context
     * @returns {BEM}
     */
    bindToWin : function(event, fn) {
        this._needSpecialUnbind = true;
        return this.bindToDomElem(win, event, fn);
    },

    /**
     * Adds an event handler to the block's main DOM elements or its nested elements
     * @protected
     * @param {jQuery|String} [elem] Element
     * @param {String} event Event name
     * @param {Function} fn Handler function, which will be executed in the block's context
     * @returns {BEM}
     */
    bindTo : function(elem, event, fn) {
        if(!event || functions.isFunction(event)) { // if there is no element
            fn = event;
            event = elem;
            elem = this.domElem;
        } else if(typeof elem === 'string') {
            elem = this.elem(elem);
        }

        return this.bindToDomElem(elem, event, fn);
    },

    /**
     * Removes event handlers from any DOM element
     * @protected
     * @param {jQuery} domElem DOM element where the event was being listened for
     * @param {String} event Event name
     * @param {Function} [fn] Handler function
     * @returns {BEM}
     */
    unbindFromDomElem : function(domElem, event, fn) {
        event = this._buildEventName(event);

        fn?
            domElem.unbind(event, fn) :
            domElem.unbind(event);
        return this;
    },

    /**
     * Removes event handler from document
     * @protected
     * @param {String} event Event name
     * @param {Function} [fn] Handler function
     * @returns {BEM}
     */
    unbindFromDoc : function(event, fn) {
        return this.unbindFromDomElem(doc, event, fn);
    },

    /**
     * Removes event handler from window
     * @protected
     * @param {String} event Event name
     * @param {Function} [fn] Handler function
     * @returns {BEM}
     */
    unbindFromWin : function(event, fn) {
        return this.unbindFromDomElem(win, event, fn);
    },

    /**
     * Removes event handlers from the block's main DOM elements or its nested elements
     * @protected
     * @param {jQuery|String} [elem] Nested element
     * @param {String} event Event name
     * @param {Function} [fn] Handler function
     * @returns {BEM}
     */
    unbindFrom : function(elem, event, fn) {
        var argLen = arguments.length;
        if(argLen === 1) {
            event = elem;
            elem = this.domElem;
        } else if(argLen === 2 && functions.isFunction(event)) {
            fn = event;
            event = elem;
            elem = this.domElem;
        } else if(typeof elem === 'string') {
            elem = this.elem(elem);
        }

        return this.unbindFromDomElem(elem, event, fn);
    },

    /**
     * Builds a full name for an event
     * @private
     * @param {String} event Event name
     * @returns {String}
     */
    _buildEventName : function(event) {
        return event.indexOf(' ') > 1?
            event.split(' ').map(function(e) {
                return this._buildOneEventName(e);
            }, this).join(' ') :
            this._buildOneEventName(event);
    },

    /**
     * Builds a full name for a single event
     * @private
     * @param {String} event Event name
     * @returns {String}
     */
    _buildOneEventName : function(event) {
        var eventNameCache = this._eventNameCache;

        if(event in eventNameCache) return eventNameCache[event];

        var uniq = '.' + this._uniqId;

        if(event.indexOf('.') < 0) return eventNameCache[event] = event + uniq;

        var lego = '.bem_' + this.__self._name;

        return eventNameCache[event] = event.split('.').map(function(e, i) {
            return i === 0? e + lego : lego + '_' + e;
        }).join('') + uniq;
    },

    /**
     * Triggers block event handlers and live event handlers
     * @protected
     * @param {String} e Event name
     * @param {Object} [data] Additional information
     * @returns {BEM}
     */
    emit : function(e, data) {
        this
            .__base(e = this._buildEvent(e), data)
            .domElem && this._ctxEmit(e, data);

        return this;
    },

    _ctxEmit : function(e, data) {
        var _this = this,
            storage = liveEventCtxStorage[_this.__self._buildCtxEventName(e.type)],
            ctxIds = {};

        storage && _this.domElem.each(function() {
            var ctx = this,
                counter = storage.counter;
            while(ctx && counter) {
                var ctxId = identify(ctx, true);
                if(ctxId) {
                    if(ctxIds[ctxId]) break;
                    var storageCtx = storage.ctxs[ctxId];
                    if(storageCtx) {
                        objects.each(storageCtx, function(handler) {
                            handler.fn.call(
                                handler.ctx || _this,
                                e,
                                data);
                        });
                        counter--;
                    }
                    ctxIds[ctxId] = true;
                }
                ctx = ctx.parentNode;
            }
        });
    },

    /**
     * Sets a modifier for a block/nested element
     * @protected
     * @param {jQuery} [elem] Nested element
     * @param {String} modName Modifier name
     * @param {String} modVal Modifier value
     * @returns {BEM}
     */
    setMod : function(elem, modName, modVal) {
        if(elem && typeof modVal !== 'undefined' && elem.length > 1) {
            var _this = this;
            elem.each(function() {
                var item = $(this);
                item.__bemElemName = elem.__bemElemName;
                _this.setMod(item, modName, modVal);
            });
            return _this;
        }
        return this.__base(elem, modName, modVal);
    },

    /**
     * Retrieves modifier value from the DOM node's CSS class
     * @private
     * @param {String} modName Modifier name
     * @param {jQuery} [elem] Nested element
     * @param {String} [elemName] Name of the nested element
     * @returns {String} Modifier value
     */
    _extractModVal : function(modName, elem, elemName) {
        var domNode = (elem || this.domElem)[0],
            matches;

        domNode &&
            (matches = domNode.className
                .match(this.__self._buildModValRE(modName, elemName || elem)));

        return matches? matches[2] || true : '';
    },

    /**
     * Retrieves a name/value list of modifiers
     * @private
     * @param {Array} [modNames] Names of modifiers
     * @param {Object} [elem] Element
     * @returns {Object} Hash of modifier values by names
     */
    _extractMods : function(modNames, elem) {
        var res = {},
            extractAll = !modNames.length,
            countMatched = 0;

        ((elem || this.domElem)[0].className
            .match(this.__self._buildModValRE(
                '(' + (extractAll? NAME_PATTERN : modNames.join('|')) + ')',
                elem,
                'g')) || []).forEach(function(className) {
                    var matches = className.match(EXTRACT_MODS_RE);
                    res[matches[1]] = matches[2] || true;
                    ++countMatched;
                });

        // empty modifier values are not reflected in classes; they must be filled with empty values
        countMatched < modNames.length && modNames.forEach(function(modName) {
            modName in res || (res[modName] = '');
        });

        return res;
    },

    /**
     * Sets a modifier's CSS class for a block's DOM element or nested element
     * @private
     * @param {String} modName Modifier name
     * @param {String} modVal Modifier value
     * @param {String} oldModVal Old modifier value
     * @param {jQuery} [elem] Element
     * @param {String} [elemName] Element name
     */
    _onSetMod : function(modName, modVal, oldModVal, elem, elemName) {
        if(!elem && modName === 'js' && modVal === '') {
            return;
        }

        var _self = this.__self,
            classPrefix = _self._buildModClassPrefix(modName, elemName),
            classRE = _self._buildModValRE(modName, elemName),
            needDel = modVal === '' || modVal === false;

        (elem || this.domElem).each(function() {
            var className = this.className,
                modClassName = classPrefix;

            modVal !== true && (modClassName += MOD_DELIM + modVal);

            (oldModVal === true?
                classRE.test(className) :
                className.indexOf(classPrefix + MOD_DELIM) > -1)?
                    this.className = className.replace(
                        classRE,
                        (needDel? '' : '$1' + modClassName)) :
                    needDel || $(this).addClass(modClassName);
        });

        elemName && this
            .dropElemCache(elemName, modName, oldModVal)
            .dropElemCache(elemName, modName, modVal);
    },

    /**
     * Finds elements nested in a block
     * @protected
     * @param {jQuery} [ctx=this.domElem] Element where search is being performed
     * @param {String} names Nested element name (or names separated by spaces)
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @param {Boolean} [strictMode=false]
     * @returns {jQuery} DOM elements
     */
    findElem : function(ctx, names, modName, modVal, strictMode) {
        if(typeof ctx === 'string') {
            strictMode = modVal;
            modVal = modName;
            modName = names;
            names = ctx;
            ctx = this.domElem;
        }

        if(typeof modName === 'boolean') {
            strictMode = modName;
            modName = undef;
        }

        var _self = this.__self,
            selector = '.' +
                names.split(' ').map(function(name) {
                    return _self.buildClass(name, modName, modVal);
                }).join(',.'),
            res = findDomElem(ctx, selector);

        return strictMode? this._filterFindElemResults(res) : res;
    },

    /**
     * Filters results of findElem helper execution in strict mode
     * @param {jQuery} res DOM elements
     * @returns {jQuery} DOM elements
     */
    _filterFindElemResults : function(res) {
        var blockSelector = this.buildSelector(),
            domElem = this.domElem;
        return res.filter(function() {
            return domElem.index($(this).closest(blockSelector)) > -1;
        });
    },

    /**
     * Finds elements nested in a block
     * @protected
     * @param {String} name Nested element name
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {jQuery} DOM elements
     */
    _elem : function(name, modName, modVal) {
        var key = name + buildModPostfix(modName, modVal),
            res;

        if(!(res = this._elemCache[key])) {
            res = this._elemCache[key] = this.findElem(name, modName, modVal);
            res.__bemElemName = name;
        }

        return res;
    },

    /**
     * Lazy search for elements nested in a block (caches results)
     * @protected
     * @param {String} names Nested element name (or names separated by spaces)
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {jQuery} DOM elements
     */
    elem : function(names, modName, modVal) {
        if(modName && typeof modName !== 'string') {
            modName.__bemElemName = names;
            return modName;
        }

        if(names.indexOf(' ') < 0) {
            return this._elem(names, modName, modVal);
        }

        var res = $([]);
        names.split(' ').forEach(function(name) {
            res = res.add(this._elem(name, modName, modVal));
        }, this);
        return res;
    },

    /**
     * Finds elements outside the context
     * @param {jQuery} ctx context
     * @param {String} elemName Element name
     * @returns {jQuery} DOM elements
     */
    closestElem : function(ctx, elemName) {
        return ctx.closest(this.buildSelector(elemName));
    },

    /**
     * Clearing the cache for elements
     * @protected
     * @param {String} [names] Nested element name (or names separated by spaces)
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {BEM}
     */
    dropElemCache : function(names, modName, modVal) {
        if(names) {
            var modPostfix = buildModPostfix(modName, modVal);
            names.indexOf(' ') < 0?
                delete this._elemCache[names + modPostfix] :
                names.split(' ').forEach(function(name) {
                    delete this._elemCache[name + modPostfix];
                }, this);
        } else {
            this._elemCache = {};
        }

        return this;
    },

    /**
     * Retrieves parameters of a block element
     * @param {String|jQuery} elem Element
     * @returns {Object} Parameters
     */
    elemParams : function(elem) {
        var elemName;
        if(typeof elem === 'string') {
            elemName = elem;
            elem = this.elem(elem);
        } else {
            elemName = this.__self._extractElemNameFrom(elem);
        }

        return extractParams(elem[0])[this.__self.buildClass(elemName)] || {};
    },

    /**
     * Elemify given element
     * @param {jQuery} elem Element
     * @param {String} elemName Name
     * @returns {jQuery}
     */
    elemify : function(elem, elemName) {
        (elem = $(elem)).__bemElemName = elemName;
        return elem;
    },

    /**
     * Checks whether a DOM element is in a block
     * @protected
     * @param {jQuery} [ctx=this.domElem] Element where check is being performed
     * @param {jQuery} domElem DOM element
     * @returns {Boolean}
     */
    containsDomElem : function(ctx, domElem) {
        if(arguments.length === 1) {
            domElem = ctx;
            ctx = this.domElem;
        }

        return dom.contains(ctx, domElem);
    },

    /**
     * Builds a CSS selector corresponding to a block/element and modifier
     * @param {String} [elem] Element name
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {String}
     */
    buildSelector : function(elem, modName, modVal) {
        return this.__self.buildSelector(elem, modName, modVal);
    },

    /**
     * Destructs a block
     * @private
     */
    _destruct : function() {
        this.destruct();
        /** @deprecated: above code has fallback, remove it in next version */
        var _this = this,
            _self = _this.__self;

        _this._needSpecialUnbind && _self.doc.add(_self.win).unbind('.' + _this._uniqId);

        _this.__base();

        delete uniqIdToBlock[_this.un()._uniqId];
    }

}, /** @lends DOM */{

    /**
     * Scope
     * Will be set on onDomReady to `<body>`
     * @protected
     * @type jQuery
     */
    scope : null,

    /**
     * Document shortcut
     * @protected
     * @type jQuery
     */
    doc : doc,

    /**
     * Window shortcut
     * @protected
     * @type jQuery
     */
    win : win,

    /**
     * Processes a block's live properties
     * @private
     * @param {Boolean} [heedLive=false] Whether to take into account that the block already processed its live properties
     * @returns {Boolean} Whether the block is a live block
     */
    _processLive : function(heedLive) {
        var res = this._liveInitable;

        if('live' in this) {
            var noLive = typeof res === 'undefined';

            if(noLive ^ heedLive) {
                res = this.live() !== false;
                this.live = functions.noop;
            }
        }

        return res;
    },

    /**
     * Initializes blocks on a fragment of the DOM tree
     * @static
     * @param {jQuery} [ctx=scope] Root DOM node
     * @returns {jQuery} ctx Initialization context
     */
    init : function(ctx) {
        ctx || (ctx = DOM.scope);

        var uniqInitId = identify();
        findDomElem(ctx, BEM_SELECTOR).each(function() {
            init($(this), uniqInitId);
        });

        this._runInitFns();

        return ctx;
    },

    /**
     * Destroys blocks on a fragment of the DOM tree
     * @static
     * @param {jQuery} ctx Root DOM node
     * @param {Boolean} [excludeSelf=false] Exclude the main domElem
     */
    destruct : function(ctx, excludeSelf) {
        findDomElem(ctx, BEM_SELECTOR, excludeSelf).each(function(i, domNode) {
            var params = getParams(domNode);
            objects.each(params, function(blockParams) {
                if(blockParams.uniqId) {
                    var block = uniqIdToBlock[blockParams.uniqId];
                    block?
                        removeDomNodeFromBlock(block, domNode) :
                        delete uniqIdToDomElems[blockParams.uniqId];
                }
            });
            delete domElemToParams[identify(domNode)];
        });

        excludeSelf? ctx.empty() : ctx.remove();
    },

    /**
     * Replaces a fragment of the DOM tree inside the context, destroying old blocks and intializing new ones
     * @static
     * @param {jQuery} ctx Root DOM node
     * @param {jQuery|String} content New content
     */
    update : function(ctx, content) {
        this.destruct(ctx, true);
        this.init(ctx.html(content));
    },

    /**
     * Changes a fragment of the DOM tree including the context and initializes blocks.
     * @static
     * @param {jQuery} ctx Root DOM node
     * @param {jQuery|String} content Content to be added
     */
    replace : function(ctx, content) {
        var prev = ctx.prev(),
            parent = ctx.parent();

        this.destruct(ctx);

        this.init(prev.length?
            $(content).insertAfter(prev) :
            $(content).prependTo(parent));
    },

    /**
     * Adds a fragment of the DOM tree at the end of the context and initializes blocks
     * @static
     * @param {jQuery} ctx Root DOM node
     * @param {jQuery|String} content Content to be added
     */
    append : function(ctx, content) {
        this.init($(content).appendTo(ctx));
    },

    /**
     * Adds a fragment of the DOM tree at the beginning of the context and initializes blocks
     * @static
     * @param {jQuery} ctx Root DOM node
     * @param {jQuery|String} content Content to be added
     */
    prepend : function(ctx, content) {
        this.init($(content).prependTo(ctx));
    },

    /**
     * Adds a fragment of the DOM tree before the context and initializes blocks
     * @static
     * @param {jQuery} ctx Contextual DOM node
     * @param {jQuery|String} content Content to be added
     */
    before : function(ctx, content) {
        this.init($(content).insertBefore(ctx));
    },

    /**
     * Adds a fragment of the DOM tree after the context and initializes blocks
     * @static
     * @param {jQuery} ctx Contextual DOM node
     * @param {jQuery|String} content Content to be added
     */
    after : function(ctx, content) {
        this.init($(content).insertAfter(ctx));
    },

    /**
     * Builds a full name for a live event
     * @static
     * @private
     * @param {String} e Event name
     * @returns {String}
     */
    _buildCtxEventName : function(e) {
        return this._name + ':' + e;
    },

    _liveClassBind : function(className, e, callback, invokeOnInit) {
        if(e.indexOf(' ') > -1) {
            e.split(' ').forEach(function(e) {
                this._liveClassBind(className, e, callback, invokeOnInit);
            }, this);
        } else {
            var storage = liveClassEventStorage[e],
                uniqId = identify(callback);

            if(!storage) {
                storage = liveClassEventStorage[e] = {};
                DOM.scope.bind(e, this._liveClassTrigger.bind(this));
            }

            storage = storage[className] || (storage[className] = { uniqIds : {}, fns : [] });

            if(!(uniqId in storage.uniqIds)) {
                storage.fns.push({ uniqId : uniqId, fn : this._buildLiveEventFn(callback, invokeOnInit) });
                storage.uniqIds[uniqId] = storage.fns.length - 1;
            }
        }

        return this;
    },

    _liveClassUnbind : function(className, e, callback) {
        var storage = liveClassEventStorage[e];
        if(storage) {
            if(callback) {
                if(storage = storage[className]) {
                    var uniqId = identify(callback);
                    if(uniqId in storage.uniqIds) {
                        var i = storage.uniqIds[uniqId],
                            len = storage.fns.length - 1;
                        storage.fns.splice(i, 1);
                        while(i < len) storage.uniqIds[storage.fns[i++].uniqId] = i - 1;
                        delete storage.uniqIds[uniqId];
                    }
                }
            } else {
                delete storage[className];
            }
        }

        return this;
    },

    _liveClassTrigger : function(e) {
        var storage = liveClassEventStorage[e.type];
        if(storage) {
            var node = e.target, classNames = [];
            for(var className in storage) {
                storage.hasOwnProperty(className) && classNames.push(className);
            }
            do {
                var nodeClassName = ' ' + node.className + ' ', i = 0;
                while(className = classNames[i++]) {
                    if(nodeClassName.indexOf(' ' + className + ' ') > -1) {
                        var j = 0, fns = storage[className].fns, fn, stopPropagationAndPreventDefault = false;
                        while(fn = fns[j++])
                            if(fn.fn.call($(node), e) === false) stopPropagationAndPreventDefault = true;

                        stopPropagationAndPreventDefault && e.preventDefault();
                        if(stopPropagationAndPreventDefault || e.isPropagationStopped()) return;

                        classNames.splice(--i, 1);
                    }
                }
            } while(classNames.length && (node = node.parentNode));
        }
    },

    _buildLiveEventFn : function(callback, invokeOnInit) {
        var _this = this;
        return function(e) {
            e.currentTarget = this;
            var args = [
                    _this._name,
                    $(this).closest(_this.buildSelector()),
                    true
                ],
                block = initBlock.apply(null, invokeOnInit? args.concat([callback, e]) : args);

            if(block && !invokeOnInit && callback)
                return callback.apply(block, arguments);
        };
    },

    /**
     * Helper for live initialization for an event on DOM elements of a block or its elements
     * @static
     * @protected
     * @param {String} [elemName] Element name or names (separated by spaces)
     * @param {String} event Event name
     * @param {Function} [callback] Handler to call after successful initialization
     */
    liveInitOnEvent : function(elemName, event, callback) {
        return this.liveBindTo(elemName, event, callback, true);
    },

    /**
     * Helper for subscribing to live events on DOM elements of a block or its elements
     * @static
     * @protected
     * @param {String|Object} [to] Description (object with modName, modVal, elem) or name of the element or elements (space-separated)
     * @param {String} event Event name
     * @param {Function} [callback] Handler
     */
    liveBindTo : function(to, event, callback, invokeOnInit) {
        if(!event || functions.isFunction(event)) {
            callback = event;
            event = to;
            to = undef;
        }

        if(!to || typeof to === 'string') {
            to = { elem : to };
        }

        if(to.elem && to.elem.indexOf(' ') > 0) {
            to.elem.split(' ').forEach(function(elem) {
                this._liveClassBind(
                    this.buildClass(elem, to.modName, to.modVal),
                    event,
                    callback,
                    invokeOnInit);
            }, this);
            return this;
        }

        return this._liveClassBind(
            this.buildClass(to.elem, to.modName, to.modVal),
            event,
            callback,
            invokeOnInit);
    },

    /**
     * Helper for unsubscribing from live events on DOM elements of a block or its elements
     * @static
     * @protected
     * @param {String} [elem] Name of the element or elements (space-separated)
     * @param {String} event Event name
     * @param {Function} [callback] Handler
     */
    liveUnbindFrom : function(elem, event, callback) {
        if(elem.indexOf(' ') > 1) {
            elem.split(' ').forEach(function(elem) {
                this._liveClassUnbind(
                    this.buildClass(elem),
                    event,
                    callback);
            }, this);
            return this;
        }

        return this._liveClassUnbind(
            this.buildClass(elem),
            event,
            callback);
    },

    /**
     * Helper for live initialization when a different block is initialized
     * @static
     * @private
     * @param {String} event Event name
     * @param {String} blockName Name of the block that should trigger a reaction when initialized
     * @param {Function} callback Handler to be called after successful initialization in the new block's context
     * @param {String} findFnName Name of the method for searching
     */
    _liveInitOnBlockEvent : function(event, blockName, callback, findFnName) {
        var name = this._name;
        blocks[blockName].on(event, function(e) {
            var args = arguments,
                blocks = e.target[findFnName](name);

            callback && blocks.forEach(function(block) {
                callback.apply(block, args);
            });
        });
        return this;
    },

    /**
     * Helper for live initialization for a different block's event on the current block's DOM element
     * @static
     * @protected
     * @param {String} event Event name
     * @param {String} blockName Name of the block that should trigger a reaction when initialized
     * @param {Function} callback Handler to be called after successful initialization in the new block's context
     */
    liveInitOnBlockEvent : function(event, blockName, callback) {
        return this._liveInitOnBlockEvent(event, blockName, callback, 'findBlocksOn');
    },

    /**
     * Helper for live initialization for a different block's event inside the current block
     * @static
     * @protected
     * @param {String} event Event name
     * @param {String} blockName Name of the block that should trigger a reaction when initialized
     * @param {Function} [callback] Handler to be called after successful initialization in the new block's context
     */
    liveInitOnBlockInsideEvent : function(event, blockName, callback) {
        return this._liveInitOnBlockEvent(event, blockName, callback, 'findBlocksOutside');
    },

    /**
     * Adds a live event handler to a block, based on a specified element where the event will be listened for
     * @static
     * @protected
     * @param {jQuery} [ctx] The element in which the event will be listened for
     * @param {String} e Event name
     * @param {Object} [data] Additional information that the handler gets as e.data
     * @param {Function} fn Handler
     * @param {Object} [fnCtx] Handler's context
     */
    on : function(ctx, e, data, fn, fnCtx) {
        return ctx.jquery?
            this._liveCtxBind(ctx, e, data, fn, fnCtx) :
            this.__base(ctx, e, data, fn);
    },

    /**
     * Removes the live event handler from a block, based on a specified element where the event was being listened for
     * @static
     * @protected
     * @param {jQuery} [ctx] The element in which the event was being listened for
     * @param {String} e Event name
     * @param {Function} [fn] Handler
     * @param {Object} [fnCtx] Handler context
     */
    un : function(ctx, e, fn, fnCtx) {
        return ctx.jquery?
            this._liveCtxUnbind(ctx, e, fn, fnCtx) :
            this.__base(ctx, e, fn);
    },

    /**
     * Adds a live event handler to a block, based on a specified element where the event will be listened for
     * @static
     * @private
     * @param {jQuery} ctx The element in which the event will be listened for
     * @param {String} e  Event name
     * @param {Object} [data] Additional information that the handler gets as e.data
     * @param {Function} fn Handler
     * @param {Object} [fnCtx] Handler context
     */
    _liveCtxBind : function(ctx, e, data, fn, fnCtx) {
        if(typeof e === 'string') {
            if(functions.isFunction(data)) {
                fnCtx = fn;
                fn = data;
                data = undef;
            }

            if(e.indexOf(' ') > -1) {
                e.split(' ').forEach(function(e) {
                    this._liveCtxBind(ctx, e, data, fn, fnCtx);
                }, this);
            } else {
                var ctxE = this._buildCtxEventName(e),
                    storage = liveEventCtxStorage[ctxE] ||
                        (liveEventCtxStorage[ctxE] = { counter : 0, ctxs : {} });

                ctx.each(function() {
                    var ctxId = identify(this),
                        ctxStorage = storage.ctxs[ctxId];
                    if(!ctxStorage) {
                        ctxStorage = storage.ctxs[ctxId] = {};
                        ++storage.counter;
                    }
                    ctxStorage[identify(fn) + (fnCtx? identify(fnCtx) : '')] = {
                        fn : fn,
                        data : data,
                        ctx : fnCtx
                    };
                });
            }
        } else {
            objects.each(e, function(fn, e) {
                this._liveCtxBind(ctx, e, fn, data);
            }, this);
        }

        return this;
    },

    /**
     * Removes a live event handler from a block, based on a specified element where the event was being listened for
     * @static
     * @private
     * @param {jQuery} ctx The element in which the event was being listened for
     * @param {String} e Event name
     * @param {Function} [fn] Handler
     * @param {Object} [fnCtx] Handler context
     */
    _liveCtxUnbind : function(ctx, e, fn, fnCtx) {
        var storage = liveEventCtxStorage[e = this._buildCtxEventName(e)];

        if(storage) {
            ctx.each(function() {
                var ctxId = identify(this, true),
                    ctxStorage;
                if(ctxId && (ctxStorage = storage.ctxs[ctxId])) {
                    fn && delete ctxStorage[identify(fn) + (fnCtx? identify(fnCtx) : '')];
                    if(!fn || objects.isEmpty(ctxStorage)) {
                        storage.counter--;
                        delete storage.ctxs[ctxId];
                    }
                }
            });
            storage.counter || delete liveEventCtxStorage[e];
        }

        return this;
    },

    /**
     * Retrieves the name of an element nested in a block
     * @static
     * @private
     * @param {jQuery} elem Nested element
     * @returns {String|undef}
     */
    _extractElemNameFrom : function(elem) {
        if(elem.__bemElemName) return elem.__bemElemName;

        var matches = elem[0].className.match(this._buildElemNameRE());
        return matches? matches[1] : undef;
    },

    /**
     * @deprecated use elemParams
     */
    extractParams : extractParams,

    /**
     * Builds a prefix for the CSS class of a DOM element or nested element of the block, based on modifier name
     * @static
     * @private
     * @param {String} modName Modifier name
     * @param {jQuery|String} [elem] Element
     * @returns {String}
     */
    _buildModClassPrefix : function(modName, elem) {
        return this._name +
               (elem?
                   ELEM_DELIM + (typeof elem === 'string'? elem : this._extractElemNameFrom(elem)) :
                   '') +
               MOD_DELIM + modName;
    },

    /**
     * Builds a regular expression for extracting modifier values from a DOM element or nested element of a block
     * @static
     * @private
     * @param {String} modName Modifier name
     * @param {jQuery|String} [elem] Element
     * @param {String} [quantifiers] Regular expression quantifiers
     * @returns {RegExp}
     */
    _buildModValRE : function(modName, elem, quantifiers) {
        return new RegExp(
            '(\\s|^)' +
            this._buildModClassPrefix(modName, elem) +
            '(?:' + MOD_DELIM + '(' + NAME_PATTERN + '))?(?=\\s|$)',
            quantifiers);
    },

    /**
     * Builds a regular expression for extracting names of elements nested in a block
     * @static
     * @private
     * @returns {RegExp}
     */
    _buildElemNameRE : function() {
        return new RegExp(this._name + ELEM_DELIM + '(' + NAME_PATTERN + ')(?:\\s|$)');
    },

    /**
     * Builds a CSS class corresponding to the block/element and modifier
     * @param {String} [elem] Element name
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {String}
     */
    buildClass : function(elem, modName, modVal) {
        return buildClass(this._name, elem, modName, modVal);
    },

    /**
     * Builds a CSS selector corresponding to the block/element and modifier
     * @param {String} [elem] Element name
     * @param {String} [modName] Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {String}
     */
    buildSelector : function(elem, modName, modVal) {
        return '.' + this.buildClass(elem, modName, modVal);
    }
});

/**
 * Returns a block on a DOM element and initializes it if necessary
 * @param {String} blockName Block name
 * @param {Object} params Block parameters
 * @returns {BEM}
 */
$.fn.bem = function(blockName, params) {
    return initBlock(blockName, this, params, true);
};

/**
 * Set default scope after DOM ready
 */
$(function() {
    DOM.scope = $('body');
});

provide(DOM);

});

/* ../../libs/bem-core/common.blocks/i-bem/__dom/i-bem__dom.js end */
;
/* ../../libs/bem-core/common.blocks/jquery/jquery.js begin */
/**
 * @module jquery
 */

modules.define(
    'jquery',
    ['loader_type_js', 'jquery__config'],
    function(provide, loader, cfg) {

/* global jQuery */

function doProvide() {
    provide(jQuery.noConflict(true));
}

typeof jQuery !== 'undefined'?
    doProvide() :
    loader(cfg.url, doProvide);

});
/* ../../libs/bem-core/common.blocks/jquery/jquery.js end */
;
/* ../../libs/bem-core/common.blocks/loader/_type/loader_type_js.js begin */
/**
 * @module loader_type_js
 * @version 1.0.0
 * @author Filatov Dmitry <dfilatov@yandex-team.ru>
 */

modules.define('loader_type_js', function(provide) {

var loading = {},
    loaded = {},
    head = document.getElementsByTagName('head')[0],
    onLoad = function(path) {
        loaded[path] = true;
        var cbs = loading[path], cb, i = 0;
        delete loading[path];
        while(cb = cbs[i++]) {
            cb();
        }
    };

provide(function(path, cb) {
    if(loaded[path]) {
        cb();
        return;
    }

    if(loading[path]) {
        loading[path].push(cb);
        return;
    }

    loading[path] = [cb];

    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = (location.protocol === 'file:' && !path.indexOf('//')? 'http:' : '') + path;
    script.onreadystatechange === null?
        script.onreadystatechange = function() {
            var readyState = this.readyState;
            if(readyState === 'loaded' || readyState === 'complete') {
                script.onreadystatechange = null;
                onLoad(path);
            }
        } :
        script.onload = script.onerror = function() {
            script.onload = script.onerror = null;
            onLoad(path);
        };

    head.insertBefore(script, head.lastChild);
});

});

/* ../../libs/bem-core/common.blocks/loader/_type/loader_type_js.js end */
;
/* ../../libs/bem-core/common.blocks/jquery/__config/jquery__config.js begin */
/**
 * @module jquery__config
 */

modules.define('jquery__config', function(provide) {

provide({
    url : '//yandex.st/jquery/1.10.2/jquery.min.js'
});

});
/* ../../libs/bem-core/common.blocks/jquery/__config/jquery__config.js end */
;
/* ../../libs/bem-core/common.blocks/objects/objects.vanilla.js begin */
/**
 * @module objects
 */

modules.define('objects', function(provide) {

var hasOwnProp = Object.prototype.hasOwnProperty;

provide({
    /**
     * Extends a given target by
     * @param {Object} target object to extend
     * @param {...Object} source
     * @returns {Object}
     */
    extend : function(target, source) {
        typeof target !== 'object' && (target = {});

        for(var i = 1, len = arguments.length; i < len; i++) {
            var obj = arguments[i];
            if(obj) {
                for(var key in obj) {
                    hasOwnProp.call(obj, key) && (target[key] = obj[key]);
                }
            }
        }

        return target;
    },

    /**
     * Check whether a given object is empty (contains no enumerable properties)
     * @param {Object} obj
     * @returns {Boolean}
     */
    isEmpty : function(obj) {
        for(var key in obj) {
            if(hasOwnProp.call(obj, key)) {
                return false;
            }
        }

        return true;
    },

    /**
     * Generic iterator function over object
     * @param {Object} obj object to iterate
     * @param {Function} fn callback
     * @param {Object} [ctx] callbacks's context
     */
    each : function(obj, fn, ctx) {
        for(var key in obj) {
            if(hasOwnProp.call(obj, key)) {
                ctx? fn.call(ctx, obj[key], key) : fn(obj[key], key);
            }
        }
    }
});

});
/* ../../libs/bem-core/common.blocks/objects/objects.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/functions/functions.vanilla.js begin */
/**
 * @module functions
 */

modules.define('functions', function(provide) {

var toStr = Object.prototype.toString;

provide({
    /**
     * Checks whether a given object is function
     * @param {*} obj
     * @returns {Boolean}
     */
    isFunction : function(obj) {
        return toStr.call(obj) === '[object Function]';
    },

    /**
     * @type {Function}
     */
    noop : function() {}
});

});
/* ../../libs/bem-core/common.blocks/functions/functions.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/dom/dom.js begin */
/**
 * @module dom
 */

modules.define('dom', ['jquery'], function(provide, $) {

provide({
    /**
     * Checks whether a DOM elem is in a context
     * @param {jQuery} ctx DOM elem where check is being performed
     * @param {jQuery} domElem DOM elem to check
     * @returns {Boolean}
     */
    contains : function(ctx, domElem) {
        var res = false;

        domElem.each(function() {
            var domNode = this;
            do {
                if(~ctx.index(domNode)) return !(res = true);
            } while(domNode = domNode.parentNode);

            return res;
        });

        return res;
    },

    /**
     * Returns current focused DOM elem in document
     * @returns {jQuery}
     */
    getFocused : function() {
        // "Error: Unspecified error." in iframe in IE9
        try { return $(document.activeElement); } catch(e) {}
    },

    /**
     * Checks whether a DOM element contains focus
     * @param domElem
     * @returns {Boolean}
     */
    containsFocus : function(domElem) {
        return this.contains(domElem, this.getFocused());
    },

    /**
    * Checks whether a browser currently can set focus on DOM elem
    * @param {jQuery} domElem
    * @returns {Boolean}
    */
    isFocusable : function(domElem) {
        var domNode = domElem[0];

        if(!domNode) return false;

        switch(domNode.tagName.toLowerCase()) {
            case 'iframe':
                return true;

            case 'input':
            case 'button':
            case 'textarea':
            case 'select':
                return !domNode.disabled;

            case 'a':
                return !!domNode.href;

            default:
                return domNode.hasAttribute('tabindex');
        }
    },

    /**
    * Checks whether a domElem is intended to edit text
    * @param {jQuery} domElem
    * @returns {Boolean}
    */
    isEditable : function(domElem) {
        var domNode = domElem[0];

        if(!domNode) return false;

        switch(domNode.tagName.toLowerCase()) {
            case 'input':
                var type = domNode.type;
                return (type === 'text' || type === 'password') && !domNode.disabled && !domNode.readOnly;

            case 'textarea':
                return !domNode.disabled && !domNode.readOnly;

            default:
                return domNode.contentEditable === 'true';
        }
    }
});

});
/* ../../libs/bem-core/common.blocks/dom/dom.js end */
;
/* ../../libs/bem-core/common.blocks/i-bem/__internal/i-bem__internal.vanilla.js begin */
/**
 * @module i-bem__internal
 */

modules.define('i-bem__internal', function(provide) {

var undef,
/**
 * Separator for modifiers and their values
 * @const
 * @type String
 */
    MOD_DELIM = '_',

/**
 * Separator between names of a block and a nested element
 * @const
 * @type String
 */
    ELEM_DELIM = '__',

/**
 * Pattern for acceptable element and modifier names
 * @const
 * @type String
 */
    NAME_PATTERN = '[a-zA-Z0-9-]+';

function isSimple(obj) {
    var typeOf = typeof obj;
    return typeOf === 'string' || typeOf === 'number' || typeOf === 'boolean';
}

function buildModPostfix(modName, modVal) {
    var res = '';
    /* jshint eqnull: true */
    if(modVal != null && modVal !== false) {
        res += MOD_DELIM + modName;
        modVal !== true && (res += MOD_DELIM + modVal);
    }
    return res;
}

function buildBlockClass(name, modName, modVal) {
    return name + buildModPostfix(modName, modVal);
}

function buildElemClass(block, name, modName, modVal) {
    return buildBlockClass(block, undef, undef) +
        ELEM_DELIM + name +
        buildModPostfix(modName, modVal);
}

provide({
    NAME_PATTERN : NAME_PATTERN,

    MOD_DELIM : MOD_DELIM,
    ELEM_DELIM : ELEM_DELIM,

    buildModPostfix : buildModPostfix,

    /**
     * Builds the class of a block or element with a modifier
     * @private
     * @param {String} block Block name
     * @param {String} [elem] Element name
     * @param {String} [modName] Modifier name
     * @param {String|Number} [modVal] Modifier value
     * @returns {String} Class
     */
    buildClass : function(block, elem, modName, modVal) {
        if(isSimple(modName)) {
            if(!isSimple(modVal)) {
                modVal = modName;
                modName = elem;
                elem = undef;
            }
        } else if(typeof modName !== 'undefined') {
            modName = undef;
        } else if(elem && typeof elem !== 'string') {
            elem = undef;
        }

        if(!(elem || modName)) { // optimization for simple case
            return block;
        }

        return elem?
            buildElemClass(block, elem, modName, modVal) :
            buildBlockClass(block, modName, modVal);
    },

    /**
     * Builds full classes for a buffer or element with modifiers
     * @private
     * @param {String} block Block name
     * @param {String} [elem] Element name
     * @param {Object} [mods] Modifiers
     * @returns {String} Class
     */
    buildClasses : function(block, elem, mods) {
        if(elem && typeof elem !== 'string') {
            mods = elem;
            elem = undef;
        }

        var res = elem?
            buildElemClass(block, elem, undef, undef) :
            buildBlockClass(block, undef, undef);

        if(mods) {
            for(var modName in mods) {
                if(mods.hasOwnProperty(modName) && mods[modName]) {
                    res += ' ' + (elem?
                        buildElemClass(block, elem, modName, mods[modName]) :
                        buildBlockClass(block, modName, mods[modName]));
                }
            }
        }

        return res;
    }
});

});
/* ../../libs/bem-core/common.blocks/i-bem/__internal/i-bem__internal.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/ecma/__string/ecma__string.js begin */
(function() {

String.prototype.trim || (String.prototype.trim = function() {
    var str = this.replace(/^\s\s*/, ''),
        ws = /\s/,
        i = str.length;

    while(ws.test(str.charAt(--i)));

    return str.slice(0, i + 1);
});

})();
/* ../../libs/bem-core/common.blocks/ecma/__string/ecma__string.js end */
;
/* ../../libs/bem-core/common.blocks/ecma/__json/ecma__json.js begin */
(function(undefined) {

if(window.JSON) return;

var _toString = Object.prototype.toString,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    meta = {
        '\b' : '\\b',
        '\t' : '\\t',
        '\n' : '\\n',
        '\f' : '\\f',
        '\r' : '\\r',
        '"' : '\\"',
        '\\' : '\\\\'
    },
    stringify;

window.JSON = {
    stringify : stringify = function(val) {
        if(val === null) {
            return 'null';
        }
        if(typeof val === 'undefined') {
            return undefined;
        }
        var res, i, strVal;
        switch(_toString.call(val)) {
            case '[object String]':
                escapable.lastIndex = 0;
                return '"' +
                    (escapable.test(val)?
                        val.replace(escapable, function(a) {
                            var c = meta[a];
                            return typeof c === 'string'? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                        }) :
                        val) +
                    '"';

            case '[object Number]':
            case '[object Boolean]':
                return '' + val;

            case '[object Array]':
                res = '['; i = 0;
                var len = val.length;
                while(i < len) {
                    strVal = stringify(val[i]);
                    res += (i++? ',' : '') + (typeof strVal === 'undefined'? 'null' : strVal);
                }
                return res + ']';

            case '[object Object]':
                if(_toString.call(val.toJSON) === '[object Function]') {
                    return stringify(val.toJSON());
                }
                res = '{'; i = 0;
                for(var key in val) {
                    if(val.hasOwnProperty(key)) {
                        strVal = stringify(val[key]);
                        typeof strVal !== 'undefined' && (res += (i++? ',' : '') + '"' + key + '":' + strVal);
                    }
                }
                return res + '}';

            default:
                return undefined;
        }
    },

    parse : function(str) {
        /*jshint -W061 */
        return Function('return ' + str)();
    }
};
})();
/* ../../libs/bem-core/common.blocks/ecma/__json/ecma__json.js end */
;
/* ../../libs/bem-highlight.js/blocks/highlight/highlight.js begin */
modules.define('highlight', function(provide) {var hljs = new function() {  /* Utility functions */  function escape(value) {    return value.replace(/&/gm, '&amp;').replace(/</gm, '&lt;').replace(/>/gm, '&gt;');  }  function findCode(pre) {    for (var node = pre.firstChild; node; node = node.nextSibling) {      if (node.nodeName.toUpperCase () == 'CODE')        return node;      if (!(node.nodeType == 3 && node.nodeValue.match(/\s+/)))        break;    }  }  function blockText(block, ignoreNewLines) {    return Array.prototype.map.call(block.childNodes, function(node) {      if (node.nodeType == 3) {        return ignoreNewLines ? node.nodeValue.replace(/\n/g, '') : node.nodeValue;      }      if (node.nodeName.toUpperCase () == 'BR') {        return '\n';      }      return blockText(node, ignoreNewLines);    }).join('');  }  function blockLanguage(block) {    var classes = (block.className + ' ' + (block.parentNode ? block.parentNode.className : '')).split(/\s+/);    classes = classes.map(function(c) {return c.replace(/^language-/, '');});    for (var i = 0; i < classes.length; i++) {      if (languages[classes[i]] || classes[i] == 'no-highlight') {        return classes[i];      }    }  }  /* Stream merging */  function nodeStream(node) {    var result = [];    (function _nodeStream(node, offset) {      for (var child = node.firstChild; child; child = child.nextSibling) {        if (child.nodeType == 3)          offset += child.nodeValue.length;        else if (child.nodeName.toUpperCase() == 'BR')          offset += 1;        else if (child.nodeType == 1) {          result.push({            event: 'start',            offset: offset,            node: child          });          offset = _nodeStream(child, offset);          result.push({            event: 'stop',            offset: offset,            node: child          });        }      }      return offset;    })(node, 0);    return result;  }  function mergeStreams(original, highlighted, value) {    var processed = 0;    var result = '';    var nodeStack = [];    function selectStream() {      if (!original.length || !highlighted.length) {        return original.length ? original : highlighted;      }      if (original[0].offset != highlighted[0].offset) {        return (original[0].offset < highlighted[0].offset) ? original : highlighted;      }      /*      To avoid starting the stream just before it should stop the order is      ensured that original always starts first and closes last:      if (event1 == 'start' && event2 == 'start')        return original;      if (event1 == 'start' && event2 == 'stop')        return highlighted;      if (event1 == 'stop' && event2 == 'start')        return original;      if (event1 == 'stop' && event2 == 'stop')        return highlighted;      ... which is collapsed to:      */      return highlighted[0].event == 'start' ? original : highlighted;    }    function open(node) {      function attr_str(a) {return ' ' + a.nodeName + '="' + escape(a.value) + '"';}      result += '<' + node.nodeName.toLowerCase() + Array.prototype.map.call(node.attributes, attr_str).join('') + '>';    }    function close(node) {      result += '</' + node.nodeName.toLowerCase() + '>';    }    function render(event) {      (event.event == 'start' ? open : close)(event.node);    }    while (original.length || highlighted.length) {      var stream = selectStream();      result += escape(value.substr(processed, stream[0].offset - processed));      processed = stream[0].offset;      if (stream == original) {        /*        On any opening or closing tag of the original markup we first close        the entire highlighted node stack, then render the original tag along        with all the following original tags at the same offset and then        reopen all the tags on the highlighted stack.        */        nodeStack.reverse().forEach(close);        do {          render(stream.splice(0, 1)[0]);          stream = selectStream();        } while (stream == original && stream.length && stream[0].offset == processed);        nodeStack.reverse().forEach(open);      } else {        if (stream[0].event == 'start') {          nodeStack.push(stream[0].node);        } else {          nodeStack.pop();        }        render(stream.splice(0, 1)[0]);      }    }    return result + escape(value.substr(processed));  }  /* Initialization */  function compileLanguage(language) {    function reStr(re) {        return (re && re.source) || re;    }    function langRe(value, global) {      return RegExp(        reStr(value),        'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')      );    }    function compileMode(mode, parent) {      if (mode.compiled)        return;      mode.compiled = true;      var keywords = []; // used later with beginWithKeyword but filled as a side-effect of keywords compilation      if (mode.keywords) {        var compiled_keywords = {};        function flatten(className, str) {          if (language.case_insensitive) {            str = str.toLowerCase();          }          str.split(' ').forEach(function(kw) {            var pair = kw.split('|');            compiled_keywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];            keywords.push(pair[0]);          });        }        mode.lexemsRe = langRe(mode.lexems || '\\b' + hljs.IDENT_RE + '\\b(?!\\.)', true);        if (typeof mode.keywords == 'string') { // string          flatten('keyword', mode.keywords);        } else {          for (var className in mode.keywords) {            if (!mode.keywords.hasOwnProperty(className))              continue;            flatten(className, mode.keywords[className]);          }        }        mode.keywords = compiled_keywords;      }      if (parent) {        if (mode.beginWithKeyword) {          mode.begin = '\\b(' + keywords.join('|') + ')\\b(?!\\.)\\s*';        }        mode.beginRe = langRe(mode.begin ? mode.begin : '\\B|\\b');        if (!mode.end && !mode.endsWithParent)          mode.end = '\\B|\\b';        if (mode.end)          mode.endRe = langRe(mode.end);        mode.terminator_end = reStr(mode.end) || '';        if (mode.endsWithParent && parent.terminator_end)          mode.terminator_end += (mode.end ? '|' : '') + parent.terminator_end;      }      if (mode.illegal)        mode.illegalRe = langRe(mode.illegal);      if (mode.relevance === undefined)        mode.relevance = 1;      if (!mode.contains) {        mode.contains = [];      }      for (var i = 0; i < mode.contains.length; i++) {        if (mode.contains[i] == 'self') {          mode.contains[i] = mode;        }        compileMode(mode.contains[i], mode);      }      if (mode.starts) {        compileMode(mode.starts, parent);      }      var terminators = [];      for (var i = 0; i < mode.contains.length; i++) {        terminators.push(reStr(mode.contains[i].begin));      }      if (mode.terminator_end) {        terminators.push(reStr(mode.terminator_end));      }      if (mode.illegal) {        terminators.push(reStr(mode.illegal));      }      mode.terminators = terminators.length ? langRe(terminators.join('|'), true) : {exec: function(s) {return null;}};    }    compileMode(language);  }  /*  Core highlighting function. Accepts a language name and a string with the  code to highlight. Returns an object with the following properties:  - relevance (int)  - keyword_count (int)  - value (an HTML string with highlighting markup)  */  function highlight(language_name, value, ignore_illegals, continuation) {    function subMode(lexem, mode) {      for (var i = 0; i < mode.contains.length; i++) {        var match = mode.contains[i].beginRe.exec(lexem);        if (match && match.index == 0) {          return mode.contains[i];        }      }    }    function endOfMode(mode, lexem) {      if (mode.end && mode.endRe.test(lexem)) {        return mode;      }      if (mode.endsWithParent) {        return endOfMode(mode.parent, lexem);      }    }    function isIllegal(lexem, mode) {      return !ignore_illegals && mode.illegal && mode.illegalRe.test(lexem);    }    function keywordMatch(mode, match) {      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];      return mode.keywords.hasOwnProperty(match_str) && mode.keywords[match_str];    }    function processKeywords() {      var buffer = escape(mode_buffer);      if (!top.keywords)        return buffer;      var result = '';      var last_index = 0;      top.lexemsRe.lastIndex = 0;      var match = top.lexemsRe.exec(buffer);      while (match) {        result += buffer.substr(last_index, match.index - last_index);        var keyword_match = keywordMatch(top, match);        if (keyword_match) {          keyword_count += keyword_match[1];          result += '<span class="'+ keyword_match[0] +'">' + match[0] + '</span>';        } else {          result += match[0];        }        last_index = top.lexemsRe.lastIndex;        match = top.lexemsRe.exec(buffer);      }      return result + buffer.substr(last_index);    }    function processSubLanguage() {      if (top.subLanguage && !languages[top.subLanguage]) {        return escape(mode_buffer);      }      var continuation = top.subLanguageMode == 'continuous' ? top.top : undefined;      var result = top.subLanguage ? highlight(top.subLanguage, mode_buffer, true, continuation) : highlightAuto(mode_buffer);      // Counting embedded language score towards the host language may be disabled      // with zeroing the containing mode relevance. Usecase in point is Markdown that      // allows XML everywhere and makes every XML snippet to have a much larger Markdown      // score.      if (top.relevance > 0) {        keyword_count += result.keyword_count;        relevance += result.relevance;      }      top.top = result.top;      return '<span class="' + result.language  + '">' + result.value + '</span>';    }    function processBuffer() {      return top.subLanguage !== undefined ? processSubLanguage() : processKeywords();    }    function startNewMode(mode, lexem) {      var markup = mode.className? '<span class="' + mode.className + '">': '';      if (mode.returnBegin) {        result += markup;        mode_buffer = '';      } else if (mode.excludeBegin) {        result += escape(lexem) + markup;        mode_buffer = '';      } else {        result += markup;        mode_buffer = lexem;      }      top = Object.create(mode, {parent: {value: top}});    }    function processLexem(buffer, lexem) {      mode_buffer += buffer;      if (lexem === undefined) {        result += processBuffer();        return 0;      }      var new_mode = subMode(lexem, top);      if (new_mode) {        result += processBuffer();        startNewMode(new_mode, lexem);        return new_mode.returnBegin ? 0 : lexem.length;      }      var end_mode = endOfMode(top, lexem);      if (end_mode) {        var origin = top;        if (!(origin.returnEnd || origin.excludeEnd)) {          mode_buffer += lexem;        }        result += processBuffer();        do {          if (top.className) {            result += '</span>';          }          relevance += top.relevance;          top = top.parent;        } while (top != end_mode.parent);        if (origin.excludeEnd) {          result += escape(lexem);        }        mode_buffer = '';        if (end_mode.starts) {          startNewMode(end_mode.starts, '');        }        return origin.returnEnd ? 0 : lexem.length;      }      if (isIllegal(lexem, top))        throw new Error('Illegal lexem "' + lexem + '" for mode "' + (top.className || '<unnamed>') + '"');      /*      Parser should not reach this point as all types of lexems should be caught      earlier, but if it does due to some bug make sure it advances at least one      character forward to prevent infinite looping.      */      mode_buffer += lexem;      return lexem.length || 1;    }    var language = languages[language_name];    if (!language) {      throw new Error('Unknown language: "' + language_name + '"');    }    compileLanguage(language);    var top = continuation || language;    var result = '';    for(var current = top; current != language; current = current.parent) {      if (current.className) {        result = '<span class="' + current.className +'">' + result;      }    }    var mode_buffer = '';    var relevance = 0;    var keyword_count = 0;    try {      var match, count, index = 0;      while (true) {        top.terminators.lastIndex = index;        match = top.terminators.exec(value);        if (!match)          break;        count = processLexem(value.substr(index, match.index - index), match[0]);        index = match.index + count;      }      processLexem(value.substr(index));      for(var current = top; current.parent; current = current.parent) { // close dangling modes        if (current.className) {          result += '</span>';        }      };      return {        relevance: relevance,        keyword_count: keyword_count,        value: result,        language: language_name,        top: top      };    } catch (e) {      if (e.message.indexOf('Illegal') != -1) {        return {          relevance: 0,          keyword_count: 0,          value: escape(value)        };      } else {        throw e;      }    }  }  /*  Highlighting with language detection. Accepts a string with the code to  highlight. Returns an object with the following properties:  - language (detected language)  - relevance (int)  - keyword_count (int)  - value (an HTML string with highlighting markup)  - second_best (object with the same structure for second-best heuristically    detected language, may be absent)  */  function highlightAuto(text) {    var result = {      keyword_count: 0,      relevance: 0,      value: escape(text)    };    var second_best = result;    for (var key in languages) {      if (!languages.hasOwnProperty(key))        continue;      var current = highlight(key, text, false);      current.language = key;      if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {        second_best = current;      }      if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {        second_best = result;        result = current;      }    }    if (second_best.language) {      result.second_best = second_best;    }    return result;  }  /*  Post-processing of the highlighted markup:  - replace TABs with something more useful  - replace real line-breaks with '<br>' for non-pre containers  */  function fixMarkup(value, tabReplace, useBR) {    if (tabReplace) {      value = value.replace(/^((<[^>]+>|\t)+)/gm, function(match, p1, offset, s) {        return p1.replace(/\t/g, tabReplace);      });    }    if (useBR) {      value = value.replace(/\n/g, '<br>');    }    return value;  }  /*  Applies highlighting to a DOM node containing code. Accepts a DOM node and  two optional parameters for fixMarkup.  */  function highlightBlock(block, tabReplace, useBR) {    var text = blockText(block, useBR);    var language = blockLanguage(block);    if (language == 'no-highlight')        return;    var result = language ? highlight(language, text, true) : highlightAuto(text);    language = result.language;    var original = nodeStream(block);    if (original.length) {      var pre = document.createElementNS('http://www.w3.org/1999/xhtml', 'pre');      pre.innerHTML = result.value;      result.value = mergeStreams(original, nodeStream(pre), text);    }    result.value = fixMarkup(result.value, tabReplace, useBR);    var class_name = block.className;    if (!class_name.match('(\\s|^)(language-)?' + language + '(\\s|$)')) {      class_name = class_name ? (class_name + ' ' + language) : language;    }    block.innerHTML = result.value;    block.className = class_name;    block.result = {      language: language,      kw: result.keyword_count,      re: result.relevance    };    if (result.second_best) {      block.second_best = {        language: result.second_best.language,        kw: result.second_best.keyword_count,        re: result.second_best.relevance      };    }  }  /*  Applies highlighting to all <pre><code>..</code></pre> blocks on a page.  */  function initHighlighting() {    if (initHighlighting.called)      return;    initHighlighting.called = true;    Array.prototype.map.call(document.getElementsByTagNameNS('http://www.w3.org/1999/xhtml', 'pre'), findCode).      filter(Boolean).      forEach(function(code){highlightBlock(code, hljs.tabReplace);});  }  /*  Attaches highlighting to the page load event.  */  function initHighlightingOnLoad() {    window.addEventListener('DOMContentLoaded', initHighlighting, false);    window.addEventListener('load', initHighlighting, false);  }  var languages = {}; // a shortcut to avoid writing "this." everywhere  /* Interface definition */  this.LANGUAGES = languages;  this.highlight = highlight;  this.highlightAuto = highlightAuto;  this.fixMarkup = fixMarkup;  this.highlightBlock = highlightBlock;  this.initHighlighting = initHighlighting;  this.initHighlightingOnLoad = initHighlightingOnLoad;  // Common regexps  this.IDENT_RE = '[a-zA-Z][a-zA-Z0-9_]*';  this.UNDERSCORE_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*';  this.NUMBER_RE = '\\b\\d+(\\.\\d+)?';  this.C_NUMBER_RE = '(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float  this.BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...  this.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|\\.|-|-=|/|/=|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';  // Common modes  this.BACKSLASH_ESCAPE = {    begin: '\\\\[\\s\\S]', relevance: 0  };  this.APOS_STRING_MODE = {    className: 'string',    begin: '\'', end: '\'',    illegal: '\\n',    contains: [this.BACKSLASH_ESCAPE],    relevance: 0  };  this.QUOTE_STRING_MODE = {    className: 'string',    begin: '"', end: '"',    illegal: '\\n',    contains: [this.BACKSLASH_ESCAPE],    relevance: 0  };  this.C_LINE_COMMENT_MODE = {    className: 'comment',    begin: '//', end: '$'  };  this.C_BLOCK_COMMENT_MODE = {    className: 'comment',    begin: '/\\*', end: '\\*/'  };  this.HASH_COMMENT_MODE = {    className: 'comment',    begin: '#', end: '$'  };  this.NUMBER_MODE = {    className: 'number',    begin: this.NUMBER_RE,    relevance: 0  };  this.C_NUMBER_MODE = {    className: 'number',    begin: this.C_NUMBER_RE,    relevance: 0  };  this.BINARY_NUMBER_MODE = {    className: 'number',    begin: this.BINARY_NUMBER_RE,    relevance: 0  };  this.REGEXP_MODE = {    className: 'regexp',    begin: /\//, end: /\/[gim]*/,    illegal: /\n/,    contains: [      this.BACKSLASH_ESCAPE,      {        begin: /\[/, end: /\]/,        relevance: 0,        contains: [this.BACKSLASH_ESCAPE]      }    ]  };  // Utility functions  this.inherit = function(parent, obj) {    var result = {};    for (var key in parent)      result[key] = parent[key];    if (obj)      for (var key in obj)        result[key] = obj[key];    return result;  };}();hljs.LANGUAGES['css'] = function(hljs) {  var IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';  var FUNCTION = {    className: 'function',    begin: IDENT_RE + '\\(', end: '\\)',    contains: ['self', hljs.NUMBER_MODE, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE]  };  return {    case_insensitive: true,    illegal: '[=/|\']',    contains: [      hljs.C_BLOCK_COMMENT_MODE,      {        className: 'id', begin: '\\#[A-Za-z0-9_-]+'      },      {        className: 'class', begin: '\\.[A-Za-z0-9_-]+',        relevance: 0      },      {        className: 'attr_selector',        begin: '\\[', end: '\\]',        illegal: '$'      },      {        className: 'pseudo',        begin: ':(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\\"\\\']+'      },      {        className: 'at_rule',        begin: '@(font-face|page)',        lexems: '[a-z-]+',        keywords: 'font-face page'      },      {        className: 'at_rule',        begin: '@', end: '[{;]', // at_rule eating first "{" is a good thing                                 // because it doesn’t let it to be parsed as                                 // a rule set but instead drops parser into                                 // the default mode which is how it should be.        contains: [          {            className: 'keyword',            begin: /\S+/          },          {            begin: /\s/, endsWithParent: true, excludeEnd: true,            relevance: 0,            contains: [              FUNCTION,              hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE,              hljs.NUMBER_MODE            ]          }        ]      },      {        className: 'tag', begin: IDENT_RE,        relevance: 0      },      {        className: 'rules',        begin: '{', end: '}',        illegal: '[^\\s]',        relevance: 0,        contains: [          hljs.C_BLOCK_COMMENT_MODE,          {            className: 'rule',            begin: '[^\\s]', returnBegin: true, end: ';', endsWithParent: true,            contains: [              {                className: 'attribute',                begin: '[A-Z\\_\\.\\-]+', end: ':',                excludeEnd: true,                illegal: '[^\\s]',                starts: {                  className: 'value',                  endsWithParent: true, excludeEnd: true,                  contains: [                    FUNCTION,                    hljs.NUMBER_MODE,                    hljs.QUOTE_STRING_MODE,                    hljs.APOS_STRING_MODE,                    hljs.C_BLOCK_COMMENT_MODE,                    {                      className: 'hexcolor', begin: '#[0-9A-Fa-f]+'                    },                    {                      className: 'important', begin: '!important'                    }                  ]                }              }            ]          }        ]      }    ]  };}(hljs);hljs.LANGUAGES['javascript'] = function(hljs) {  return {    keywords: {      keyword:        'in if for while finally var new function do return void else break catch ' +        'instanceof with throw case default try this switch continue typeof delete ' +        'let yield const',      literal:        'true false null undefined NaN Infinity'    },    contains: [      hljs.APOS_STRING_MODE,      hljs.QUOTE_STRING_MODE,      hljs.C_LINE_COMMENT_MODE,      hljs.C_BLOCK_COMMENT_MODE,      hljs.C_NUMBER_MODE,      { // "value" container        begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',        keywords: 'return throw case',        contains: [          hljs.C_LINE_COMMENT_MODE,          hljs.C_BLOCK_COMMENT_MODE,          hljs.REGEXP_MODE,          { // E4X            begin: /</, end: />;/,            subLanguage: 'xml'          }        ],        relevance: 0      },      {        className: 'function',        beginWithKeyword: true, end: /{/,        keywords: 'function',        contains: [          {            className: 'title', begin: /[A-Za-z$_][0-9A-Za-z$_]*/          },          {            className: 'params',            begin: /\(/, end: /\)/,            contains: [              hljs.C_LINE_COMMENT_MODE,              hljs.C_BLOCK_COMMENT_MODE            ],            illegal: /["'\(]/          }        ],        illegal: /\[|%/      }    ]  };}(hljs);hljs.LANGUAGES['xml'] = function(hljs) {  var XML_IDENT_RE = '[A-Za-z0-9\\._:-]+';  var TAG_INTERNALS = {    endsWithParent: true,    relevance: 0,    contains: [      {        className: 'attribute',        begin: XML_IDENT_RE,        relevance: 0      },      {        begin: '="', returnBegin: true, end: '"',        contains: [{            className: 'value',            begin: '"', endsWithParent: true        }]      },      {        begin: '=\'', returnBegin: true, end: '\'',        contains: [{          className: 'value',          begin: '\'', endsWithParent: true        }]      },      {        begin: '=',        contains: [{          className: 'value',          begin: '[^\\s/>]+'        }]      }    ]  };  return {    case_insensitive: true,    contains: [      {        className: 'pi',        begin: '<\\?', end: '\\?>',        relevance: 10      },      {        className: 'doctype',        begin: '<!DOCTYPE', end: '>',        relevance: 10,        contains: [{begin: '\\[', end: '\\]'}]      },      {        className: 'comment',        begin: '<!--', end: '-->',        relevance: 10      },      {        className: 'cdata',        begin: '<\\!\\[CDATA\\[', end: '\\]\\]>',        relevance: 10      },      {        className: 'tag',        /*        The lookahead pattern (?=...) ensures that 'begin' only matches        '<style' as a single word, followed by a whitespace or an        ending braket. The '$' is needed for the lexem to be recognized        by hljs.subMode() that tests lexems outside the stream.        */        begin: '<style(?=\\s|>|$)', end: '>',        keywords: {title: 'style'},        contains: [TAG_INTERNALS],        starts: {          end: '</style>', returnEnd: true,          subLanguage: 'css'        }      },      {        className: 'tag',        // See the comment in the <style tag about the lookahead pattern        begin: '<script(?=\\s|>|$)', end: '>',        keywords: {title: 'script'},        contains: [TAG_INTERNALS],        starts: {          end: '</script>', returnEnd: true,          subLanguage: 'javascript'        }      },      {        begin: '<%', end: '%>',        subLanguage: 'vbscript'      },      {        className: 'tag',        begin: '</?', end: '/?>',        relevance: 0,        contains: [          {            className: 'title', begin: '[^ /><]+'          },          TAG_INTERNALS        ]      }    ]  };}(hljs);    provide(hljs);});
/* ../../libs/bem-highlight.js/blocks/highlight/highlight.js end */
;
/* ../../libs/bem-highlight.js/blocks/highlight/__init/highlight__init.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define('i-bem__dom', ['highlight', 'jquery'], function(provide, hljs, $, DOM) {

var langAliases = {
    js: 'javascript',
    html: 'xml'
}

DOM.decl('highlight', {
    onSetMod: {
        "js": {
            "inited" : function() {
                this._langHack();
                hljs.highlightBlock(this.getCodeContainer());
            }
        }
    },
    _langHack: function() {
        var lang = this.params.lang;
        lang = langAliases[lang] || lang;

        this.get$CodeContainer().addClass(lang);
    },
    getCodeContainer: function() {
        this._codeContainer = this._codeContainer || this.elem('code')[0];
        return this._codeContainer;
    },
    get$CodeContainer: function() {
        this._$CodeContainer = this._$CodeContainer || this.elem('code');
        return this._$CodeContainer;
    }
});

provide(DOM);

});

/* ../../libs/bem-highlight.js/blocks/highlight/__init/highlight__init.js end */
;
/* ../../desktop.blocks/highlight/__init/highlight__init.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define('i-bem__dom', ['jquery'], function(provide, $, DOM) {

DOM.decl('highlight', {
    getCodeContainer: function() {
        this._codeContainer = this._codeContainer || this.domElem.find('pre code')[0];
        return this._codeContainer;
    },
    get$CodeContainer: function() {
        this._$CodeContainer = this._$CodeContainer || $(this.getCodeContainer());
        return this._$CodeContainer;
    },
    getDefaultParams: function() {
        return {
            lang: this.get$CodeContainer().attr('data-lang')
        }
    }
});

provide(DOM);

});

/* ../../desktop.blocks/highlight/__init/highlight__init.js end */
;
/* ../../libs/bem-core/common.blocks/i-bem/i-bem.vanilla.js begin */
/**
 * @module i-bem
 */

modules.define(
    'i-bem',
    ['inherit', 'identify', 'next-tick', 'objects', 'functions', 'events', 'events__channels'],
    function(provide, inherit, identify, nextTick, objects, functions, events, channels) {

var undef,
/**
 * Storage for block init functions
 * @private
 * @type Array
 */
    initFns = [],

/**
 * Storage for block declarations (hash by block name)
 * @private
 * @type Object
 */
    blocks = {};

/**
 * Builds the name of the handler method for setting a modifier
 * @private
 * @param {String} prefix
 * @param {String} modName Modifier name
 * @param {String} modVal Modifier value
 * @param {String} [elemName] Element name
 * @returns {String}
 */
function buildModFnName(prefix, modName, modVal, elemName) {
    return '__' + prefix +
        (elemName? '__elem_' + elemName : '') +
       '__mod' +
       (modName? '_' + modName : '') +
       (modVal? '_' + modVal : '');
}

/**
 * Transforms a hash of modifier handlers to methods
 * @static
 * @private
 * @param {String} prefix
 * @param {Object} modFns
 * @param {Object} props
 * @param {String} [elemName]
 */
function modFnsToProps(prefix, modFns, props, elemName) {
    if(functions.isFunction(modFns)) {
        props[buildModFnName(prefix, '*', '*', elemName)] = modFns;
    } else {
        var modName, modVal, modFn;
        for(modName in modFns) {
            if(modFns.hasOwnProperty(modName)) {
                modFn = modFns[modName];
                if(functions.isFunction(modFn)) {
                    props[buildModFnName(prefix, modName, modName === 'js'? 'inited' : '*', elemName)] = modFn;
                    /** @deprecated: above code has fallback, replace
                     *  modName === 'js'? 'inited': '*'
                     *  with
                     *  '*'
                     *  in next version
                     */
                } else {
                    for(modVal in modFn) {
                        if(modFn.hasOwnProperty(modVal)) {
                            props[buildModFnName(prefix, modName, modVal, elemName)] = modFn[modVal];
                        }
                    }
                }
            }
        }
    }
}

function buildCheckMod(modName, modVal) {
    return modVal?
        Array.isArray(modVal)?
            function(block) {
                var i = 0, len = modVal.length;
                while(i < len)
                    if(block.hasMod(modName, modVal[i++]))
                        return true;
                return false;
            } :
            function(block) {
                return block.hasMod(modName, modVal);
            } :
        function(block) {
            return block.hasMod(modName);
        };
}

function convertModHandlersToMethods(props) {
    if(props.beforeSetMod) {
        modFnsToProps('before', props.beforeSetMod, props);
        delete props.beforeSetMod;
    }

    if(props.onSetMod) {
        modFnsToProps('after', props.onSetMod, props);
        delete props.onSetMod;
    }

    var elemName;
    if(props.beforeElemSetMod) {
        for(elemName in props.beforeElemSetMod) {
            if(props.beforeElemSetMod.hasOwnProperty(elemName)) {
                modFnsToProps('before', props.beforeElemSetMod[elemName], props, elemName);
            }
        }
        delete props.beforeElemSetMod;
    }

    if(props.onElemSetMod) {
        for(elemName in props.onElemSetMod) {
            if(props.onElemSetMod.hasOwnProperty(elemName)) {
                modFnsToProps('after', props.onElemSetMod[elemName], props, elemName);
            }
        }
        delete props.onElemSetMod;
    }
}

var BEM = inherit(events.Emitter, /** @lends BEM.prototype */ {
    /**
     * @class Base block for creating BEM blocks
     * @constructs
     * @private
     * @param {Object} mods Block modifiers
     * @param {Object} params Block parameters
     * @param {Boolean} [initImmediately=true]
     */
    __constructor : function(mods, params, initImmediately) {
        /**
         * Cache of block modifiers
         * @private
         * @type Object
         */
        this._modCache = mods || {};

        /**
         * Current modifiers in the stack
         * @private
         * @type Object
         */
        this._processingMods = {};

        /**
         * The block's parameters, taking into account the defaults
         * @protected
         * @type Object
         */
        this._params = params; // это нужно для правильной сборки параметров у блока из нескольких нод
        this.params = null;

        initImmediately !== false?
            this._init() :
            initFns.push(this._init, this);
    },

    /**
     * Initializes the block
     * @private
     */
    _init : function() {
        if(!this._initing && !this.hasMod('js', 'inited')) {
            this._initing = true;

            if(!this.params) {
                this.params = objects.extend(this.getDefaultParams(), this._params);
                delete this._params;
            }

            this.setMod('js', 'inited');
            delete this._initing;
            this.hasMod('js', 'inited') && this.trigger('init');
        }

        return this;
    },

    /**
     * Executes the block's event handlers and live event handlers
     * @protected
     * @param {String} e Event name
     * @param {Object} [data] Additional information
     * @returns {BEM}
     */
    emit : function(e, data) {
        this
            .__base(e = this._buildEvent(e), data)
            .hasMod('js', 'inited') &&
                this.__self.trigger(e, data);

        return this;
    },

    /** @deprecated use emit */
    trigger : function() {
        return this.emit.apply(this, arguments);
    },

    _buildEvent : function(e) {
        typeof e === 'string'?
            e = new events.Event(e, this) :
            e.target || (e.target = this);

        return e;
    },

    /**
     * Checks whether a block or nested element has a modifier
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} modName Modifier name
     * @param {String} [modVal] Modifier value
     * @returns {Boolean}
     */
    hasMod : function(elem, modName, modVal) {
        var len = arguments.length,
            invert = false;

        if(len === 1) {
            modVal = '';
            modName = elem;
            elem = undef;
            invert = true;
        } else if(len === 2) {
            if(typeof elem === 'string') {
                modVal = modName;
                modName = elem;
                elem = undef;
            } else {
                modVal = '';
                invert = true;
            }
        }

        var res = this.getMod(elem, modName) === modVal;
        return invert? !res : res;
    },

    /**
     * Returns the value of the modifier of the block/nested element
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} modName Modifier name
     * @returns {String} Modifier value
     */
    getMod : function(elem, modName) {
        var type = typeof elem;
        if(type === 'string' || type === 'undefined') { // elem either omitted or undefined
            modName = elem || modName;
            var modCache = this._modCache;
            return modName in modCache?
                modCache[modName] || '' :
                modCache[modName] = this._extractModVal(modName);
        }

        return this._getElemMod(modName, elem);
    },

    /**
     * Returns the value of the modifier of the nested element
     * @private
     * @param {String} modName Modifier name
     * @param {Object} elem Nested element
     * @param {Object} [elem] Nested element name
     * @returns {String} Modifier value
     */
    _getElemMod : function(modName, elem, elemName) {
        return this._extractModVal(modName, elem, elemName);
    },

    /**
     * Returns values of modifiers of the block/nested element
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} [modName1, ..., modNameN] Modifier names
     * @returns {Object} Hash of modifier values
     */
    getMods : function(elem) {
        var hasElem = elem && typeof elem !== 'string',
            modNames = [].slice.call(arguments, hasElem? 1 : 0),
            res = this._extractMods(modNames, hasElem? elem : undef);

        if(!hasElem) { // caching
            modNames.length?
                modNames.forEach(function(name) {
                    this._modCache[name] = res[name];
                }, this) :
                this._modCache = res;
        }

        return res;
    },

    /**
     * Sets the modifier for a block/nested element
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} modName Modifier name
     * @param {String} modVal Modifier value
     * @returns {BEM}
     */
    setMod : function(elem, modName, modVal) {
        if(typeof modVal === 'undefined') {
            if(typeof elem === 'string') { // if no elem
                modVal = typeof modName === 'undefined'?
                    true :  // e.g. setMod('focused')
                    modName; // e.g. setMod('js', 'inited')
                modName = elem;
                elem = undef;
            } else { // if elem
                modVal = true; // e.g. setMod(elem, 'focused')
            }
        }

        if(!elem || elem[0]) {
            modVal === false && (modVal = '');

            var modId = (elem && elem[0]? identify(elem[0]) : '') + '_' + modName;

            if(this._processingMods[modId])
                return this;

            var elemName,
                curModVal = elem?
                    this._getElemMod(modName, elem, elemName = this.__self._extractElemNameFrom(elem)) :
                    this.getMod(modName);

            if(curModVal === modVal)
                return this;

            this._processingMods[modId] = true;

            var needSetMod = true,
                modFnParams = [modName, modVal, curModVal];

            elem && modFnParams.unshift(elem);

            var modVars = [['*', '*'], [modName, '*'], [modName, modVal]],
                prefixes = ['before', 'after'],
                i = 0, prefix, j, modVar;

            while(prefix = prefixes[i++]) {
                j = 0;
                while(modVar = modVars[j++]) {
                    if(this._callModFn(prefix, elemName, modVar[0], modVar[1], modFnParams) === false) {
                        needSetMod = false;
                        break;
                    }
                }

                if(!needSetMod) break;

                if(prefix === 'before') {
                    this._onSetMod(modName, modVal, curModVal, elem, elemName);
                    elem || (this._modCache[modName] = modVal); // cache only block mods
                }
            }

            this._processingMods[modId] = null;
        }

        return this;
    },

    /**
     * Function after successfully changing the modifier of the block/nested element
     * @protected
     * @param {String} modName Modifier name
     * @param {String} modVal Modifier value
     * @param {String} oldModVal Old modifier value
     * @param {Object} [elem] Nested element
     * @param {String} [elemName] Element name
     */
    _onSetMod : function(modName, modVal, oldModVal, elem, elemName) {},

    /**
     * Sets a modifier for a block/nested element, depending on conditions.
     * If the condition parameter is passed: when true, modVal1 is set; when false, modVal2 is set.
     * If the condition parameter is not passed: modVal1 is set if modVal2 was set, or vice versa.
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} modName Modifier name
     * @param {String} modVal1 First modifier value
     * @param {String} [modVal2] Second modifier value
     * @param {Boolean} [condition] Condition
     * @returns {BEM}
     */
    toggleMod : function(elem, modName, modVal1, modVal2, condition) {
        if(typeof elem === 'string') { // if this is a block
            condition = modVal2;
            modVal2 = modVal1;
            modVal1 = modName;
            modName = elem;
            elem = undef;
        }

        if(typeof modVal1 === 'undefined') { // boolean mod
            modVal1 = true;
        }

        if(typeof modVal2 === 'undefined') {
            modVal2 = '';
        } else if(typeof modVal2 === 'boolean') {
            condition = modVal2;
            modVal2 = '';
        }

        var modVal = this.getMod(elem, modName);
        (modVal === modVal1 || modVal === modVal2) &&
            this.setMod(
                elem,
                modName,
                typeof condition === 'boolean'?
                    (condition? modVal1 : modVal2) :
                    this.hasMod(elem, modName, modVal1)? modVal2 : modVal1);

        return this;
    },

    /**
     * Removes a modifier from a block/nested element
     * @protected
     * @param {Object} [elem] Nested element
     * @param {String} modName Modifier name
     * @returns {BEM}
     */
    delMod : function(elem, modName) {
        if(!modName) {
            modName = elem;
            elem = undef;
        }

        return this.setMod(elem, modName, '');
    },

    /**
     * Executes handlers for setting modifiers
     * @private
     * @param {String} prefix
     * @param {String} elemName Element name
     * @param {String} modName Modifier name
     * @param {String} modVal Modifier value
     * @param {Array} modFnParams Handler parameters
     */
    _callModFn : function(prefix, elemName, modName, modVal, modFnParams) {
        var modFnName = buildModFnName(prefix, modName, modVal, elemName);
        return this[modFnName]?
           this[modFnName].apply(this, modFnParams) :
           undef;
    },

    /**
     * Retrieves the value of the modifier
     * @private
     * @param {String} modName Modifier name
     * @param {Object} [elem] Element
     * @returns {String} Modifier value
     */
    _extractModVal : function(modName, elem) {
        return '';
    },

    /**
     * Retrieves name/value for a list of modifiers
     * @private
     * @param {Array} modNames Names of modifiers
     * @param {Object} [elem] Element
     * @returns {Object} Hash of modifier values by name
     */
    _extractMods : function(modNames, elem) {
        return {};
    },

    /**
     * Returns a block's default parameters
     * @returns {Object}
     */
    getDefaultParams : function() {
        return {};
    },

    /**
     * Deletes a block
     * @private
     */
    _destruct : function() {
        this.delMod('js');
    },

    /**
     * Executes given callback on next turn evenloop in block's context
     * @param {Function} fn callback
     * @returns {this}
     */
    nextTick : function(fn) {
        var _this = this;
        nextTick(function() {
            _this.hasMod('js', 'inited') && fn.call(_this);
        });
        return this;
    },

    /** @deprecated use onSetMod js '' */
    destruct : function() {},

    /** @deprecated use module "next-tick" instead */
    afterCurrentEvent : function(fn, ctx) {
        this.__self.afterCurrentEvent(this.changeThis(fn, ctx));
    },

    /** @deprecated use module "events__channels" instead */
    channel : function() {
        return this.__self.channel.apply(null, arguments);
    },

    /** @deprecated use native bind */
    changeThis : function(fn, ctx) {
        return fn.bind(ctx || this);
    }
}, /** @lends BEM */{

    _name : 'i-bem',

    /**
     * Storage for block declarations (hash by block name)
     * @static
     * @protected
     * @type Object
     */
    blocks : blocks,

    /**
     * Declares blocks and creates a block class
     * @static
     * @protected
     * @param {String|Object} decl Block name (simple syntax) or description
     * @param {String} decl.block|decl.name Block name
     * @param {String} [decl.baseBlock] Name of the parent block
     * @param {Array} [decl.baseMix] Mixed block names
     * @param {String} [decl.modName] Modifier name
     * @param {String|Array} [decl.modVal] Modifier value
     * @param {Object} [props] Methods
     * @param {Object} [staticProps] Static methods
     */
    decl : function(decl, props, staticProps) {
        typeof decl === 'string' && (decl = { block : decl });

        if(decl.baseBlock && !blocks[decl.baseBlock])
            throw('baseBlock "' + decl.baseBlock + '" for "' + decl.block + '" is undefined');

        convertModHandlersToMethods(props || (props = {}));

        var baseBlock = blocks[decl.baseBlock || decl.block] || this;

        if(decl.modName) {
            var checkMod = buildCheckMod(decl.modName, decl.modVal);
            objects.each(props, function(prop, name) {
                functions.isFunction(prop) &&
                    (props[name] = function() {
                        var method;
                        if(checkMod(this)) {
                            method = prop;
                        } else {
                            var baseMethod = baseBlock.prototype[name];
                            baseMethod && baseMethod !== prop &&
                                (method = this.__base);
                        }
                        return method?
                            method.apply(this, arguments) :
                            undef;
                    });
            });
        }

        if(staticProps && typeof staticProps.live === 'boolean') {
            var live = staticProps.live;
            staticProps.live = function() {
                return live;
            };
        }

        var block, baseBlocks = baseBlock;
        if(decl.baseMix) {
            baseBlocks = [baseBlocks];
            decl.baseMix.forEach(function(mixedBlock) {
                if(!blocks[mixedBlock]) {
                    throw('mix block "' + mixedBlock + '" for "' + decl.block + '" is undefined');
                }
                baseBlocks.push(blocks[mixedBlock]);
            });
        }

        decl.block === baseBlock._name?
            // makes a new "live" if the old one was already executed
            (block = inherit.self(baseBlocks, props, staticProps))._processLive(true) :
            (block = blocks[decl.block] = inherit(baseBlocks, props, staticProps))._name = decl.block;

        return block;
    },

    declMix : function(block, props, staticProps) {
        convertModHandlersToMethods(props || (props = {}));
        return blocks[block] = inherit(props, staticProps);
    },

    /**
     * Processes a block's live properties
     * @private
     * @param {Boolean} [heedLive=false] Whether to take into account that the block already processed its live properties
     * @returns {Boolean} Whether the block is a live block
     */
    _processLive : function(heedLive) {
        return false;
    },

    /**
     * Factory method for creating an instance of the block named
     * @static
     * @param {String|Object} block Block name or description
     * @param {Object} [params] Block parameters
     * @returns {BEM}
     */
    create : function(block, params) {
        typeof block === 'string' && (block = { block : block });

        return new blocks[block.block](block.mods, params);
    },

    /**
     * Returns the name of the current block
     * @static
     * @protected
     * @returns {String}
     */
    getName : function() {
        return this._name;
    },

    /**
     * Retrieves the name of an element nested in a block
     * @static
     * @private
     * @param {Object} elem Nested element
     * @returns {String|undef}
     */
    _extractElemNameFrom : function(elem) {},

    /**
     * Executes the block init functions
     * @private
     */
    _runInitFns : function() {
        if(initFns.length) {
            var fns = initFns,
                fn, i = 0;

            initFns = [];
            while(fn = fns[i]) {
                fn.call(fns[i + 1]);
                i += 2;
            }
        }
    },

    /** @deprecated use native bind */
    changeThis : function(fn, ctx) {
        return fn.bind(ctx || this);
    },

    /** @deprecated use module "events__channels" instead */
    channel : function() {
        return channels.apply(null, arguments);
    },

    /** @deprecated use module "next-tick" instead */
    afterCurrentEvent : function(fn, ctx) {
        nextTick(ctx? fn.bind(ctx) : fn);
    }
});

provide(BEM);

});
/* ../../libs/bem-core/common.blocks/i-bem/i-bem.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/inherit/inherit.vanilla.js begin */
/**
 * @module inherit
 * @version 2.1.0
 * @author Filatov Dmitry <dfilatov@yandex-team.ru>
 */

modules.define('inherit', function(provide) {

var hasIntrospection = (function(){'_';}).toString().indexOf('_') > -1,
    emptyBase = function() {},
    objCreate = Object.create || function(ptp) {
        var inheritance = function() {};
        inheritance.prototype = ptp;
        return new inheritance();
    },
    objKeys = Object.keys || function(obj) {
        var res = [];
        for(var i in obj) {
            obj.hasOwnProperty(i) && res.push(i);
        }
        return res;
    },
    extend = function(o1, o2) {
        for(var i in o2) {
            o2.hasOwnProperty(i) && (o1[i] = o2[i]);
        }

        return o1;
    },
    toStr = Object.prototype.toString,
    isArray = Array.isArray || function(obj) {
        return toStr.call(obj) === '[object Array]';
    },
    isFunction = function(obj) {
        return toStr.call(obj) === '[object Function]';
    },
    noOp = function() {},
    needCheckProps = true,
    testPropObj = { toString : '' };

for(var i in testPropObj) { // fucking ie hasn't toString, valueOf in for
    testPropObj.hasOwnProperty(i) && (needCheckProps = false);
}

var specProps = needCheckProps? ['toString', 'valueOf'] : null;

function getPropList(obj) {
    var res = objKeys(obj);
    if(needCheckProps) {
        var specProp, i = 0;
        while(specProp = specProps[i++]) {
            obj.hasOwnProperty(specProp) && res.push(specProp);
        }
    }

    return res;
}

function override(base, res, add) {
    var addList = getPropList(add),
        j = 0, len = addList.length,
        name, prop;
    while(j < len) {
        if((name = addList[j++]) === '__self') {
            continue;
        }
        prop = add[name];
        if(isFunction(prop) &&
                (!hasIntrospection || prop.toString().indexOf('.__base') > -1)) {
            res[name] = (function(name, prop) {
                var baseMethod = base[name] || noOp;
                return function() {
                    var baseSaved = this.__base;
                    this.__base = baseMethod;
                    var res = prop.apply(this, arguments);
                    this.__base = baseSaved;
                    return res;
                };
            })(name, prop);
        } else {
            res[name] = prop;
        }
    }
}

function applyMixins(mixins, res) {
    var i = 1, mixin;
    while(mixin = mixins[i++]) {
        res?
            isFunction(mixin)?
                inherit.self(res, mixin.prototype, mixin) :
                inherit.self(res, mixin) :
            res = isFunction(mixin)?
                inherit(mixins[0], mixin.prototype, mixin) :
                inherit(mixins[0], mixin);
    }
    return res || mixins[0];
}

var inherit = function() {
    var args = arguments,
        withMixins = isArray(args[0]),
        hasBase = withMixins || isFunction(args[0]),
        base = hasBase? withMixins? applyMixins(args[0]) : args[0] : emptyBase,
        props = args[hasBase? 1 : 0] || {},
        staticProps = args[hasBase? 2 : 1],
        res = props.__constructor || (hasBase && base.prototype.__constructor)?
            function() {
                return this.__constructor.apply(this, arguments);
            } :
            function() {};

    if(!hasBase) {
        res.prototype = props;
        res.prototype.__self = res.prototype.constructor = res;
        return extend(res, staticProps);
    }

    extend(res, base);

    var basePtp = base.prototype,
        resPtp = res.prototype = objCreate(basePtp);

    resPtp.__self = resPtp.constructor = res;

    props && override(basePtp, resPtp, props);
    staticProps && override(base, res, staticProps);

    return res;
};

inherit.self = function() {
    var args = arguments,
        withMixins = isArray(args[0]),
        base = withMixins? applyMixins(args[0], args[0][0]) : args[0],
        props = args[1],
        staticProps = args[2],
        basePtp = base.prototype;

    props && override(basePtp, basePtp, props);
    staticProps && override(base, base, staticProps);
    
    return base;
};

provide(inherit);

});
/* ../../libs/bem-core/common.blocks/inherit/inherit.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/identify/identify.vanilla.js begin */
/**
 * @module identify
 * @version 1.0.0
 * @author Filatov Dmitry <dfilatov@yandex-team.ru>
 */

modules.define('identify', function(provide) {

var counter = 0,
    expando = '__' + (+new Date),
    get = function() {
        return 'uniq' + (++counter);
    };

/**
 * Makes unique ID
 * @param {Object} obj Object that needs to be identified
 * @param {Boolean} [onlyGet=false] Return a unique value only if it had already been assigned before
 * @returns {String} ID
 */
provide(function(obj, onlyGet) {
    if(!obj) {
        return get();
    }

    var key = 'uniqueID' in obj? 'uniqueID' : expando; // Use when possible. native uniqueID for elements in IE

    return onlyGet || key in obj?
        obj[key] :
        obj[key] = get();
});

});
/* ../../libs/bem-core/common.blocks/identify/identify.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/next-tick/next-tick.vanilla.js begin */
/**
 * @module next-tick
 * @version 1.0.1
 * @author Filatov Dmitry <dfilatov@yandex-team.ru>
 */

modules.define('next-tick', function(provide) {

var global = this.global,
    fns = [],
    enqueueFn = function(fn) {
        return fns.push(fn) === 1;
    },
    callFns = function() {
        var fnsToCall = fns, i = 0, len = fns.length;
        fns = [];
        while(i < len) {
            fnsToCall[i++]();
        }
    };

    /* global process */
    if(typeof process === 'object' && process.nextTick) { // nodejs
        return provide(function(fn) {
            enqueueFn(fn) && process.nextTick(callFns);
        });
    }

    if(global.setImmediate) { // ie10
        return provide(function(fn) {
            enqueueFn(fn) && global.setImmediate(callFns);
        });
    }

    if(global.postMessage) { // modern browsers
        var isPostMessageAsync = true;
        if(global.attachEvent) {
            var checkAsync = function() {
                    isPostMessageAsync = false;
                };
            global.attachEvent('onmessage', checkAsync);
            global.postMessage('__checkAsync', '*');
            global.detachEvent('onmessage', checkAsync);
        }

        if(isPostMessageAsync) {
            var msg = '__nextTick' + (+new Date),
                onMessage = function(e) {
                    if(e.data === msg) {
                        e.stopPropagation && e.stopPropagation();
                        callFns();
                    }
                };

            global.addEventListener?
                global.addEventListener('message', onMessage, true) :
                global.attachEvent('onmessage', onMessage);

            return provide(function(fn) {
                enqueueFn(fn) && global.postMessage(msg, '*');
            });
        }
    }

    var doc = global.document;
    if('onreadystatechange' in doc.createElement('script')) { // ie6-ie8
        var createScript = function() {
                var script = doc.createElement('script');
                script.onreadystatechange = function() {
                    script.parentNode.removeChild(script);
                    script = script.onreadystatechange = null;
                    callFns();
            };
            (doc.documentElement || doc.body).appendChild(script);
        };

        return provide(function(fn) {
            enqueueFn(fn) && createScript();
        });
    }

    provide(function(fn) { // old browsers
        enqueueFn(fn) && global.setTimeout(callFns, 0);
    });
});

/* ../../libs/bem-core/common.blocks/next-tick/next-tick.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/events/events.vanilla.js begin */
/**
 * @module events
 * @version 1.0.4
 * @author Filatov Dmitry <dfilatov@yandex-team.ru>
 */

modules.define(
    'events',
    ['identify', 'inherit', 'functions'],
    function(provide, identify, inherit, functions) {

var undef,
    storageExpando = '__' + (+new Date) + 'storage',
    getFnId = function(fn, ctx) {
        return identify(fn) + (ctx? identify(ctx) : '');
    },

    /**
     * @class Event
     * @alias events:Event
     */
    Event = inherit(/** @lends Event.prototype */{
        __constructor : function(type, target) {
            this.type = type;
            this.target = target;
            this.result = undef;
            this.data = undef;

            this._isDefaultPrevented = false;
            this._isPropagationStopped = false;
        },

        preventDefault : function() {
            this._isDefaultPrevented = true;
        },

        isDefaultPrevented : function() {
            return this._isDefaultPrevented;
        },

        stopPropagation : function() {
            this._isPropagationStopped = true;
        },

        isPropagationStopped : function() {
            return this._isPropagationStopped;
        }
    }),

    EmitterProps = {
        /**
         * Adds an event handler
         * @param {String} e Event type
         * @param {Object} [data] Additional data that the handler gets as e.data
         * @param {Function} fn Handler
         * @param {Object} [ctx] Handler context
         * @returns {this}
         */
        on : function(e, data, fn, ctx, _special) {
            if(typeof e === 'string') {
                if(functions.isFunction(data)) {
                    ctx = fn;
                    fn = data;
                    data = undef;
                }

                var id = getFnId(fn, ctx),
                    storage = this[storageExpando] || (this[storageExpando] = {}),
                    eventTypes = e.split(' '), eventType,
                    i = 0, list, item,
                    eventStorage;

                while(eventType = eventTypes[i++]) {
                    eventStorage = storage[eventType] || (storage[eventType] = { ids : {}, list : {} });
                    if(!(id in eventStorage.ids)) {
                        list = eventStorage.list;
                        item = { fn : fn, data : data, ctx : ctx, special : _special };
                        if(list.last) {
                            list.last.next = item;
                            item.prev = list.last;
                        } else {
                            list.first = item;
                        }
                        eventStorage.ids[id] = list.last = item;
                    }
                }
            } else {
                for(var key in e) {
                    e.hasOwnProperty(key) && this.on(key, e[key], data, _special);
                }
            }

            return this;
        },

        /**
         * Adds a one time handler for the event.
         * Handler is executed only the next time the event is fired, after which it is removed.
         * @param {String} e Event type
         * @param {Object} [data] Additional data that the handler gets as e.data
         * @param {Function} fn Handler
         * @param {Object} [ctx] Handler context
         * @returns {this}
         */
        once : function(e, data, fn, ctx) {
            return this.on(e, data, fn, ctx, { once : true });
        },

        /**
         * Removes event handler or handlers
         * @param {String} [e] Event type
         * @param {Function} [fn] Handler
         * @param {Object} [ctx] Handler context
         * @returns {this}
         */
        un : function(e, fn, ctx) {
            if(typeof e === 'string' || typeof e === 'undefined') {
                var storage = this[storageExpando];
                if(storage) {
                    if(e) { // if event type was passed
                        var eventTypes = e.split(' '),
                            i = 0, eventStorage;
                        while(e = eventTypes[i++]) {
                            if(eventStorage = storage[e]) {
                                if(fn) {  // if specific handler was passed
                                    var id = getFnId(fn, ctx),
                                        ids = eventStorage.ids;
                                    if(id in ids) {
                                        var list = eventStorage.list,
                                            item = ids[id],
                                            prev = item.prev,
                                            next = item.next;

                                        if(prev) {
                                            prev.next = next;
                                        } else if(item === list.first) {
                                            list.first = next;
                                        }

                                        if(next) {
                                            next.prev = prev;
                                        } else if(item === list.last) {
                                            list.last = prev;
                                        }

                                        delete ids[id];
                                    }
                                } else {
                                    delete this[storageExpando][e];
                                }
                            }
                        }
                    } else {
                        delete this[storageExpando];
                    }
                }
            } else {
                for(var key in e) {
                    e.hasOwnProperty(key) && this.un(key, e[key], fn);
                }
            }

            return this;
        },

        /**
         * Fires event handlers
         * @param {String|Event} e Event
         * @param {Object} [data] Additional data
         * @returns {this}
         */
        emit : function(e, data) {
            var storage = this[storageExpando],
                eventInstantiated = false;

            if(storage) {
                var eventTypes = [typeof e === 'string'? e : e.type, '*'],
                    i = 0, eventType, eventStorage;
                while(eventType = eventTypes[i++]) {
                    if(eventStorage = storage[eventType]) {
                        var item = eventStorage.list.first,
                            lastItem = eventStorage.list.last,
                            res;
                        while(item) {
                            if(!eventInstantiated) { // instantiate Event only on demand
                                eventInstantiated = true;
                                typeof e === 'string' && (e = new Event(e));
                                e.target || (e.target = this);
                            }

                            e.data = item.data;
                            res = item.fn.apply(item.ctx || this, arguments);
                            if(typeof res !== 'undefined') {
                                e.result = res;
                                if(res === false) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                }
                            }

                            item.special && item.special.once &&
                                this.un(e.type, item.fn, item.ctx);

                            if(item === lastItem) {
                                break;
                            }

                            item = item.next;
                        }
                    }
                }
            }

            return this;
        }
    };

/** @deprecated use emit */
EmitterProps.trigger = EmitterProps.emit;

/** @deprecated use once */
EmitterProps.onFirst = EmitterProps.once;

/**
 * @class Emitter
 * @alias events:Emitter
 */
var Emitter = inherit(
        /** @lends Emitter.prototype */
        EmitterProps,
        /** @lends Emitter */
        EmitterProps);

provide({
    Emitter : Emitter,
    Event : Event
});

});
/* ../../libs/bem-core/common.blocks/events/events.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/events/__channels/events__channels.vanilla.js begin */
/**
 * @module events__channels
 */

modules.define('events__channels', ['events'], function(provide, events) {

var undef,

/**
 * Communication channels storage
 * @type Object
 */
    channels = {};

/**
 * Returns/destroys a named communication channel
 * @param {String} [id='default'] Channel ID
 * @param {Boolean} [drop=false] Destroy the channel
 * @returns {events.Emitter|undefined} Communication channel
 */
provide(function(id, drop) {
    if(typeof id === 'boolean') {
        drop = id;
        id = undef;
    }

    id || (id = 'default');

    if(drop) {
        if(channels[id]) {
            channels[id].un();
            delete channels[id];
        }
        return;
    }

    return channels[id] || (channels[id] = new events.Emitter());
});

});
/* ../../libs/bem-core/common.blocks/events/__channels/events__channels.vanilla.js end */
;
/* ../../libs/bem-core/common.blocks/ecma/__object/ecma__object.js begin */
/**
 * Возвращает массив свойств объекта
 * @param {Object} obj объект
 * @returns {Array}
 */
Object.keys || (Object.keys = function(obj) {
    var res = [];

    for(var i in obj) obj.hasOwnProperty(i) &&
        res.push(i);

    return res;
});
/* ../../libs/bem-core/common.blocks/ecma/__object/ecma__object.js end */
;
/* ../../libs/bem-core/common.blocks/ecma/__array/ecma__array.js begin */
(function() {

var ptp = Array.prototype,
    toStr = Object.prototype.toString,
    methods = {
        /**
         * Finds the index of an element in an array
         * @param {Object} item
         * @param {Number} [fromIdx] Starting from index (length - 1 - fromIdx, if fromIdx < 0)
         * @returns {Number} Element index or -1, if not found
         */
        indexOf : function(item, fromIdx) {
            fromIdx = +(fromIdx || 0);

            var t = this, len = t.length;

            if(len > 0 && fromIdx < len) {
                fromIdx = fromIdx < 0? Math.ceil(fromIdx) : Math.floor(fromIdx);
                fromIdx < -len && (fromIdx = 0);
                fromIdx < 0 && (fromIdx = fromIdx + len);

                while(fromIdx < len) {
                    if(fromIdx in t && t[fromIdx] === item)
                        return fromIdx;
                    ++fromIdx;
                }
            }

            return -1;
        },

        /**
         * Calls the callback for each element
         * @param {Function} callback Called for each element
         * @param {Object} [ctx=null] Callback context
         */
        forEach : function(callback, ctx) {
            var i = -1, t = this, len = t.length;
            while(++i < len) i in t &&
                (ctx? callback.call(ctx, t[i], i, t) : callback(t[i], i, t));
        },

        /**
         * Creates array B from array A so that B[i] = callback(A[i])
         * @param {Function} callback Called for each element
         * @param {Object} [ctx=null] Callback context
         * @returns {Array}
         */
        map : function(callback, ctx) {
            var i = -1, t = this, len = t.length,
                res = new Array(len);

            while(++i < len) i in t &&
                (res[i] = ctx? callback.call(ctx, t[i], i, t) : callback(t[i], i, t));

            return res;
        },

        /**
         * Creates an array containing only the elements from the source array that the callback returns true for. 
         * @param {Function} callback Called for each element
         * @param {Object} [ctx] Callback context
         * @returns {Array}
         */
        filter : function(callback, ctx) {
            var i = -1, t = this, len = t.length,
                res = [];

            while(++i < len) i in t &&
                (ctx? callback.call(ctx, t[i], i, t) : callback(t[i], i, t)) && res.push(t[i]);

            return res;
        },

        /**
         * Wraps the array using an accumulator
         * @param {Function} callback Called for each element
         * @param {Object} [initialVal] Initial value of the accumulator
         * @returns {Object} Accumulator
         */
        reduce : function(callback, initialVal) {
            var i = -1, t = this, len = t.length,
                res;

            if(arguments.length < 2) {
                while(++i < len) {
                    if(i in t) {
                        res = t[i];
                        break;
                    }
                }
            } else {
                res = initialVal;
            }

            while(++i < len) i in t &&
                (res = callback(res, t[i], i, t));

            return res;
        },

        /**
         * Checks whether at least one element in the array meets the condition in the callback
         * @param {Function} callback
         * @param {Object} [ctx=this] Callback context
         * @returns {Boolean}
         */
        some : function(callback, ctx) {
            var i = -1, t = this, len = t.length;

            while(++i < len)
                if(i in t && (ctx? callback.call(ctx, t[i], i, t) : callback(t[i], i, t)))
                    return true;

            return false;
        },

        /**
         * Checks whether every element in the array meets the condition in the callback
         * @param {Function} callback
         * @param {Object} [ctx=this] Context of the callback call
         * @returns {Boolean}
         */
        every : function(callback, ctx) {
            var i = -1, t = this, len = t.length;

            while(++i < len)
                if(i in t && !(ctx? callback.call(ctx, t[i], i, t) : callback(t[i], i, t)))
                    return false;

            return true;
        }
    };

for(var name in methods)
    ptp[name] || (ptp[name] = methods[name]);

Array.isArray || (Array.isArray = function(obj) {
    return toStr.call(obj) === '[object Array]';
});

})();
/* ../../libs/bem-core/common.blocks/ecma/__array/ecma__array.js end */
;
/* ../../libs/bem-core/common.blocks/ecma/__function/ecma__function.js begin */
(function() {

var slice = Array.prototype.slice;

Function.prototype.bind || (Function.prototype.bind = function(ctx) {
    var fn = this,
        args = slice.call(arguments, 1);

    return function() {
        return fn.apply(ctx, args.concat(slice.call(arguments)));
    };
});

})();
/* ../../libs/bem-core/common.blocks/ecma/__function/ecma__function.js end */
;
/* ../../libs/bem-core/desktop.blocks/ua/ua.js begin */
// inspired by http://code.jquery.com/jquery-migrate-1.1.1.js

modules.define('ua', function(provide) {

var ua = navigator.userAgent.toLowerCase(),
	match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
		/(webkit)[ \/]([\w.]+)/.exec(ua) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
		/(msie) ([\w.]+)/.exec(ua) ||
		ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) ||
		[],
    matched = {
		browser : match[1] || '',
		version : match[2] || '0'
    },
	browser = {};

if(matched.browser) {
    browser[matched.browser] = true;
    browser.version = matched.version;
}

if(browser.chrome) {
    browser.webkit = true;
} else if(browser.webkit) {
    browser.safari = true;
}

provide(browser);

});
/* ../../libs/bem-core/desktop.blocks/ua/ua.js end */
;
/* ../../libs/bem-core/common.blocks/i-bem/__dom/_init/i-bem__dom_init_auto.js begin */
/* дефолтная инициализация */
modules.require(['i-bem__dom', 'jquery'], function(DOM, $) {

$(function() {
    DOM.init();
});

});
/* ../../libs/bem-core/common.blocks/i-bem/__dom/_init/i-bem__dom_init_auto.js end */
;
/* ../../desktop.blocks/grid/grid.js begin */

(function() {

    (/grid=?/).test(window.location.search) ?
        $('body').append('<div class="grid"></div>') :
        false;

})();

/* ../../desktop.blocks/grid/grid.js end */
;
/* ../../desktop.blocks/fonts/fonts.js begin */
/** @requires BEM */
/* http://stackoverflow.com/questions/16253429/saving-a-css-web-font-in-html5-local-storage */

modules.define('fonts', ['jquery'], function(provide, $) {

$(function(){

    /* For storage only */
    if (typeof(Storage) === 'undefined') {
        return;
    }
    if (localStorage.getItem('varya.me.fonts') === null) {

        $.ajax({
            url: '/*borschik:link:../../data/fonts.css',
            success: function(response){
                localStorage.setItem('varya.me.fonts', response);
            },
            dataType: 'text'
        });

    }

});

});

modules.require(['fonts'], function(){});

/* ../../desktop.blocks/fonts/fonts.js end */
;
/* ../../desktop.blocks/candies/candies.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define('i-bem__dom', function(provide, DOM) {

DOM.decl('candies', {

    onSetMod : {

        'js' : {

            'inited' : function() {

                var width = this.domElem.width(),
                    p = this.params,
                    candies = [],
                    i = 0,
                    colorIndex = this.__self.stopPoint,
                    initSize = 6,
                    rt = 6,
                    newSize = function(max, min) {
                        return Math.round(Math.random()*(max - min) + min);
                    }

                while(width > 2*rt) {

                    if (initSize < p.size.min) {
                        size = newSize(initSize, initSize);
                        initSize = initSize + 2;
                    } else {
                        size = newSize(p.size.max, p.size.min);
                    }
                    if (size > width - 2*rt) size = width - 2*rt;
                    bt = Math.round(Math.sin(i/2.5 + 1.5)*p.size.max*0.9/2);
                    //bt = Math.round(Math.sin(i/2.5)*p.size.max*0.9/Math.sqrt(i));

                    lastSize = size;
                    width = width - size - rt;
                    candies.push('<b alt="' + i + '" class="candies_i" style="width:' + size + 'px; height:' + size + 'px; background:#' + this.__self.colors[colorIndex] +';margin: auto ' + rt + 'px ' + bt + 'px 0"></b>');
                    i++;
                    colorIndex++;
                    if (!this.__self.colors[colorIndex]) {
                        colorIndex = 0;
                    }
                }
                this.__self.stopPoint = colorIndex;
                if (p.reverse) { candies.reverse(); }
                this.domElem.append('<b>' + candies.join('') + '</b>');
            }
        }

    }

}, {
    colors: [
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'd24d33',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        '72664e',
        'ccd600',
        'fffbdb',
        'df620e',
        '993838',
        'ff9600',
        'd24d33',
        '8960a7',
        '82b964',
        'f87aa0',
        'd43f3f',
        '668000',
        'ff9600',
        '8960a7',
        'c9c9c9',
        '993838',
        'CCD600',
        '668000',
        'f4cc13',
        '72664e',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9'
    ],
    stopPoint: 0

});

provide(DOM);

});

/* ../../desktop.blocks/candies/candies.js end */
;
/* ../../desktop.blocks/colors/colors.js begin */
/** @requires BEM */

modules.define('colors', function(provide) {

var lastIndex;

var colors = {

    getRandomColor: function() {
        var clrs = this.colorBase;
        return clrs[Math.floor(Math.random()*clrs.length)];
    },

    getNextColor: function() {
        return this.colorBase[this.getLastIndex()];
    },

    getLastIndex: function() {
        var clrs = this.colorBase;
        lastIndex = lastIndex + 1 || Math.floor(Math.random()*clrs.length);
        if (lastIndex == clrs.length) {
            lastIndex = 0;
        }
        return lastIndex;
    },

    colorBase: [
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'd24d33',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        '72664e',
        'ccd600',
        'fffbdb',
        'df620e',
        '993838',
        'ff9600',
        'd24d33',
        '8960a7',
        '82b964',
        'f87aa0',
        'd43f3f',
        '668000',
        'ff9600',
        '8960a7',
        'c9c9c9',
        '993838',
        'CCD600',
        '668000',
        'f4cc13',
        '72664e',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9',
        'fa9300',
        '66c9ee',
        'c9c9c9',
        '82b964',
        'CCD600',
        'fffbdb',
        '2e77bb',
        '6bd5b1',
        'f87aa0',
        'c9c9c9'
        ]

};

provide(colors);

});

/* ../../desktop.blocks/colors/colors.js end */
;
/* ../../desktop.blocks/recent-posts/recent-posts.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define('i-bem__dom', ['jquery', 'colors'], function(provide, $, colors, DOM) {

DOM.decl('recent-posts', {

    onSetMod : {

        'js' : {

            'inited' : function() {

                this.elem('date').each(function(i, elem){
                    var clr = colors.getNextColor();
                    $(elem).css('background-color', '#' + clr);
                });

            }
        }

    }

});

provide(DOM);

});

/* ../../desktop.blocks/recent-posts/recent-posts.js end */
;
/* ../../libs/bem-components/common.blocks/link/link.js begin */
modules.define('i-bem__dom', function(provide, DOM) {

DOM.decl('link', {
    _onClick : function(e) {
        e.preventDefault();
        this.hasMod('disabled') || this.trigger('click');
    }
}, {
    live : function() {
        this.liveBindTo('pointerclick', function(e) {
            this._onClick(e);
        });
    }
});

provide(DOM);

});

/* ../../libs/bem-components/common.blocks/link/link.js end */
;
/* ../../desktop.blocks/github/__jquery/github__jquery.js begin */
//
// Source: http://www.joepettersson.com/demo/jquery-github-widget/
//
//
modules.define('i-bem__dom', ['jquery'], function(provide, $, DOM) {

(function ($, window, document, undefined) {
	"use strict";
	// Setup our defaults
	var pluginName = 'github',
		defaults = {
			user: "joepettersson",
			show_extended_info: true,
			show_follows: true,
			width: "400px",
			show_repos: 10,
			oldest_first: false
		};

	// The plugin constructor
	function Github(element, options) {
		// Set the element specified by the user
		this.element = element;
		// Combie in the defaults and options into a single options object
		this.options = $.extend({}, defaults, options);
		// Instantiate our init function, it inherits the options object, so we don't need to explicitly pass it
		this.init();

		this.errorType = '';
	}

	// Our Prototype!
	Github.prototype = {
		// Our controller
		init: function () {
			// Explicitly set our options and element so they can be inherited by functions
			// Then init our functions to build the widget
			var el = this.element,
				options = this.options,
				user = this.model("user", options.user, function (data) {
					// Build layout view with user data and append it to the specified element
					$(el).append(Github.prototype.view_layout(data.data, options));
				}),
				repos = this.model("repos", options.user, function (data) {
					// Build our repos partial and append it to the layout, which is already in the DOM
					$(el).find("#ghw-repos ul").append(Github.prototype.view_partial_repos(data, options, el));
					// Fade out the Github loader gif, and then fade in the repos we just appended
					$(el).find("#ghw-repos #ghw-github-loader").slideUp(250, function () {
						$(el).find("#ghw-repos ul").slideDown(250);
					});
					// Init our bind function once everything is present within the DOM
					Github.prototype.bind(options);
				});
		},

		// Our user model, get and set user data
		model: function (type, user, callback) {
			// Construct our endpoint URL depending on what is being requested
			var url = "https://api.github.com/users/" + user.toLowerCase(); if (type === "repos") { url += "/repos"; } url += "?callback=?";
			// Get data from Github user endpoint, JSONP bitches
			$.getJSON(url, function (data) {
				// Make sure our callback is defined and is of the right type, if it is fire it
				if (typeof callback !== "undefined" && typeof callback === "function") {
					callback(data);
				}
			});
		},

		// The main layout for the widget
		view_layout: function (user, options) {
			var markup = '';
			// As it's setting a simple string, the width value can be anything acceptable to CSS (px/%/em/pt etc)
			markup += '<div id="ghw-github" style="width: ' + options.width + '">';
			markup += '<div id="ghw-header" class="ghw-clear">';
			markup += '<div id="ghw-user"><a href="' + user.html_url + '" id="ghw-github-user">';
			// If the user has a custom avatar then show it, if not display the default github avatar (served from their CDN)
			if (typeof user.avatar_url !== "undefined" && user.avatar_url.length > 0) {
				//markup += '<img src="' + user.avatar_url + '" alt="Avatar" width="34px" height="34px" />';
				markup += '<b style="background-image:url(' + user.avatar_url + ');"></b>';
			} else {
				markup += '<img src="https://a248.e.akamai.net/assets.github.com/images/gravatars/gravatar-140.png" alt="Avatar" width="34px" height="34px" />';
			}
			markup += '</a></div>';
			// Check if we should show the extended info, a custom option
			// Within extended info we need to check for the existence of elements, as not everyone has the same info set in their Github profile
			if (options.show_extended_info === true) {
				markup += '<div id="ghw-extended-user-info">';
				if (user.name && user.name.length) {
					markup += '<p class="ghw-name">' + user.name + '</p>';
				}
				markup += '<p class="ghw-place">';
				if (user.company && user.company.length) {
					markup += user.company + ' ';
				}
				if (user.location && user.location.length) {
					markup += user.location;
				}
				markup += '</p>';
				if (typeof user.bio === "string" && user.bio.length > 0) {
					markup += '<p class="ghw-bio">' + user.bio + '</p>';
				}
				if (user.hireable === true) {
					markup += '<p class="ghw-hireable">I\'m availabe for hire!</p>';
				}
				markup += '<span class="ghw-repos">' + user.public_repos + ' repos</span>';
				markup += '<span class="ghw-gists">' + user.public_gists + ' gists</span>';
				markup += '</div>';
			}
			markup += '<div id="ghw-github-user-data">';
			markup += '<h2><a href="' + user.html_url + '">';
			if (typeof user.login !== "undefined") {
				markup += user.login;
			} else {
				markup += 'User not found';
			}
			markup += '</a></h2>';
			markup += '<a href="' + user.html_url + '" id="ghw-header-total-repos">' + user.public_repos + ' repos</a>';
			// Check if the option to show followers is set to true, if not, don't show it
			if (options.show_follows === true && typeof user.login !== "undefined") {
				markup += ' | <a href="https://github.com/' + user.login.toLowerCase() + '/followers" id="ghw-current-followers">' + user.followers + ' followers</a>';
			}
			markup += '</div>';
			markup += '</div>';
			// The element which the repos partial will eventually be appended to
			markup += '<div id="ghw-repos"><div id="ghw-github-loader"></div><ul></ul></div>';
			markup += '</div>';
			return markup;
		},

		// Our repos partial, which will construct the repo list itself
		view_partial_repos: function (data, options, el) {
			var markup = '';
			// Are we displaying our repos oldest first?
			if (options.oldest_first === true) {
				// Yes? use the reverse method to reverse the order of the data objects
				data = data.data.reverse();
			} else {
				data = data.data;
			}
			// Iterate through the repos
			$.each(data, function (i) {
				// Github returns pages of 30 repos per request, however we only want to show the number set in the options
				if (i <= options.show_repos - 1) {
					markup += '<li id="ghw-repo-' + i + '" class="ghw-clear ghw-repo';
					// This is a little bit of a hack to make the CSS easier, if the repo has a language attribute, it will mean
					// the box carries over two lines, which means the buttons on the right become missaligned. So therefore, if
					// there are two lines, add a special class so we can style it more easily.
					if (this.language !== null) {
						markup += ' double';
					}
					markup += '">';
					markup += '<div class="ghw-left">';
					markup += '<p class="ghw-title"><a href="' + this.html_url + '" data-description="<p>' + this.name + '</p>' + this.description + '" class="ghw-github-tooltip">' + this.name + '</a></p>';
					markup += '<p class="ghw-meta-data">';
					if (this.language !== null) {
						markup += '<span class="ghw-language">' + this.language + '</span></p>';
					}
					markup += '</div>';
					markup += '<div class="ghw-right">';
					markup += '<span class="ghw-forks ghw-github-tooltip" data-description="This repo has ' + this.forks + ' fork(s)">' + this.forks + '</span>';
					markup += '<span class="ghw-watchers ghw-github-tooltip" data-description="This repo has ' + this.watchers + ' watcher(s)">' + this.watchers + '</span>';
					markup += '<span class="ghw-issues ghw-github-tooltip" data-description="This project has ' + this.open_issues + ' open issues">' + this.open_issues + '</span>';
					markup += '</div>';
					markup += '</li>';
				}
			});
			return markup;
		},

		// Our bin utility funciton that will be init'd once we have populated the DOM
		bind: function (options) {
			// If the option to show the extended user info is set to true then bind it to do so
			if (options.show_extended_info === true) {
				$("#ghw-github-user").hover(function () {
					$("#ghw-github #ghw-header #ghw-extended-user-info").fadeIn(250, function () {
						$("#ghw-github #ghw-header img").addClass("ghw-ghw-no-bottom-border");
					});
				}, function () {
					$("#ghw-github #ghw-header #ghw-extended-user-info").fadeOut(250, function () {
						$("#ghw-github #ghw-header img").removeClass("ghw-ghw-no-bottom-border");
					});
				});
			}
			// Make the buttons become opaque when hovering over a repo row
			$("#ghw-github li").hover(function () {
				$(this).find(".ghw-right").animate({opacity: 1}, 200);
			}, function () {
				$(this).find(".ghw-right").animate({opacity: 0.3}, 200);
			});
			// Our main tooltip function
			$(".ghw-github-tooltip").hover(function () {
				var markup = '<div class="ghw-github-tooltip-content">' + $(this).attr("data-description") + '</div>';
				$(this).append(markup);
			}, function () {
				$(".ghw-github-tooltip-content").remove();
			});
		}
	};

	// Setup our plugin
	$.fn[pluginName] = function (options) {
		return this.each(function () {
			if (!$.data(this, 'plugin_' + pluginName)) {
				$.data(this, 'plugin_' + pluginName,
					new Github(this, options));
			}
		});
	};

}($, window, document));

provide(DOM);

});

/* ../../desktop.blocks/github/__jquery/github__jquery.js end */
;
/* ../../desktop.blocks/github/github.js begin */
/** @requires BEM */
/** @requires BEM.DOM */

modules.define('i-bem__dom', function(provide, DOM) {

DOM.decl('github', {

    onSetMod : {

        'js' : {
            'inited' :function() {
                this.elem('body').github({
                    user: this.params.user,
                    show_repos: 5,
                    show_extended_info: false,
                    show_follows: false,
                    oldest_first: false,
                    width: '100%'
                });
            }
        }

    }

});

provide(DOM);

});

/* ../../desktop.blocks/github/github.js end */
;
(function(g) {

  var __xjst = (function(exports) {

     var __$ref={};function apply(ctx){try{return applyc(ctx||this,__$ref)}catch(e){(ctx||this).xjstContext=e;throw e}}exports.apply=apply;function applyc(__$ctx,__$ref){var __$t=__$ctx._mode;if(__$t==="attrs"){var __$r=__$g0(__$ctx,__$ref);if(__$r!==__$ref)return __$r}else if(__$t==="tag"){var __$t=__$ctx.block;if(__$t==="link"){if(!__$ctx.elem){__$ctx.__$a=0;return"a"}if(!__$ctx.elem){__$ctx.__$a=0;return"a"}}__$ctx.__$a=0;return undefined;var __$t=__$ctx.block;if(__$t==="page"){var __$r=__$g1(__$ctx,__$ref);if(__$r!==__$ref)return __$r}else if(__$t==="ua"){if(!__$ctx.elem){__$ctx.__$a=0;return"script"}if(!__$ctx.elem){__$ctx.__$a=0;return"script"}}}else if(__$t==="content"){__$ctx.__$a=0;return __$ctx.ctx.content;var __$t=__$ctx.block;if(__$t==="ua"){if(!__$ctx.elem){__$ctx.__$a=0;var __$r=[";(function(d,e,c,r){","e=d.documentElement;",'c="className";','r="replace";','e[c]=e[c][r]("ua_js_no","ua_js_yes");','if(d.compatMode!="CSS1Compat")','e[c]=e[c][r]("ua_css_standart","ua_css_quirks")',"})(document);"].join("");if(__$r!==__$ref)return __$r}if(!__$ctx.elem){__$ctx.__$a=0;return[";(function(d,e,c,r){","e=d.documentElement;",'c="className";','r="replace";','e[c]=e[c][r](/(ua_js_)no/g,"$1yes");','if(d.compatMode!="CSS1Compat")','e[c]=e[c][r](/(ua_css_)standart/g,"$1quirks")',"})(document);"]}}}else if(__$t==="mix"){__$ctx.__$a=0;return undefined;var __$t=__$ctx.block;if(__$t==="page"){if(!__$ctx.elem){__$ctx.__$a=0;return[{elem:"body"}]}if(!__$ctx.elem){__$ctx.__$a=0;return[{elem:"body"}]}}}else if(__$t==="bem"){__$ctx.__$a=0;return undefined;var __$t=__$ctx.block;if(__$t==="page"){var __$r=__$g2(__$ctx,__$ref);if(__$r!==__$ref)return __$r}else if(__$t==="ua"){if(!__$ctx.elem){__$ctx.__$a=0;return false}if(!__$ctx.elem){__$ctx.__$a=0;return false}}}else if(__$t==="js"){__$ctx.__$a=0;return undefined}else if(__$t==="cls"){__$ctx.__$a=0;return undefined;var __$t=__$ctx.block;if(__$t==="page"){var __$t=__$ctx.elem;if(__$t==="root"){__$ctx.__$a=0;return"ua_js_no ua_css_standard";__$ctx.__$a=0;return"ua_js_no ua_css_standard"}}}else if(__$t==="default"){var __$r=__$g3(__$ctx,__$ref);if(__$r!==__$ref)return __$r}else if(__$t===""){if(__$ctx.ctx&&__$ctx.ctx.hasOwnProperty("_res")&&__$ctx.__$a!==1){__$ctx.__$a=0;var __$r=__$b65(__$ctx,__$ref);if(__$r!==__$ref)return __$r}if(__$ctx._.isSimple(__$ctx.ctx)){__$ctx.__$a=0;var __$r=__$b66(__$ctx,__$ref);if(__$r!==__$ref)return __$r}if(!__$ctx.ctx){__$ctx.__$a=0;var __$r=__$b67(__$ctx,__$ref);if(__$r!==__$ref)return __$r}if(__$ctx._.isArray(__$ctx.ctx)){__$ctx.__$a=0;var __$r=__$b68(__$ctx,__$ref);if(__$r!==__$ref)return __$r}__$ctx.__$a=0;var __$r=__$b69(__$ctx,__$ref);if(__$r!==__$ref)return __$r}else if(__$t==="head"){var __$t=__$ctx.block;if(__$t==="page"){var __$t=!__$ctx.elem;if(__$t){if(__$ctx.__$a!==3){__$ctx.__$a=0;return[function(){var __$r__$118;var __$l0__$119=__$ctx._mode;__$ctx._mode="xUACompatible";__$r__$118=applyc(__$ctx,__$ref);__$ctx._mode=__$l0__$119;return __$r__$118}(),function(){var __$r__$120;__$ctx.__$a=3;__$r__$120=applyc(__$ctx,__$ref);return __$r__$120}()]}__$ctx.__$a=0;return[{block:"ua"},__$ctx.ctx.head]}}}else if(__$t==="xUACompatible"){var __$t=__$ctx.block;if(__$t==="page"){if(!__$ctx.elem){__$ctx.__$a=0;return __$ctx.ctx["x-ua-compatible"]===false?false:{tag:"meta",attrs:{"http-equiv":"X-UA-Compatible",content:__$ctx.ctx["x-ua-compatible"]||"IE=edge"}}}if(!__$ctx.elem){__$ctx.__$a=0;return __$ctx.ctx["x-ua-compatible"]===false?false:{tag:"meta",attrs:{"http-equiv":"X-UA-Compatible",content:__$ctx.ctx["x-ua-compatible"]||"IE=edge"}}}}}else if(__$t==="doctype"){var __$t=__$ctx.block;if(__$t==="page"){if(!__$ctx.elem){__$ctx.__$a=0;return __$ctx.ctx.doctype||"<!DOCTYPE html>"}if(!__$ctx.elem){__$ctx.__$a=0;return __$ctx.ctx.doctype||"<!DOCTYPE html>"}}}__$ctx.__$a=0}[function(exports){var BEM_={},toString=Object.prototype.toString,isArray=Array.isArray||function(obj){return toString.call(obj)==="[object Array]"},SHORT_TAGS={area:1,base:1,br:1,col:1,command:1,embed:1,hr:1,img:1,input:1,keygen:1,link:1,meta:1,param:1,source:1,wbr:1};!function(BEM,undefined){var MOD_DELIM="_",ELEM_DELIM="__",NAME_PATTERN="[a-zA-Z0-9-]+";function buildModPostfix(modName,modVal,buffer){buffer.push(MOD_DELIM,modName);modVal!==true&&buffer.push(MOD_DELIM,modVal)}function buildBlockClass(name,modName,modVal,buffer){buffer.push(name);modVal&&buildModPostfix(modName,modVal,buffer)}function buildElemClass(block,name,modName,modVal,buffer){buildBlockClass(block,undefined,undefined,buffer);buffer.push(ELEM_DELIM,name);modVal&&buildModPostfix(modName,modVal,buffer)}BEM.INTERNAL={NAME_PATTERN:NAME_PATTERN,MOD_DELIM:MOD_DELIM,ELEM_DELIM:ELEM_DELIM,buildModPostfix:function(modName,modVal,buffer){var res=buffer||[];buildModPostfix(modName,modVal,res);return buffer?res:res.join("")},buildClass:function(block,elem,modName,modVal,buffer){var typeOfModName=typeof modName;if(typeOfModName==="string"||typeOfModName==="boolean"){var typeOfModVal=typeof modVal;if(typeOfModVal!=="string"&&typeOfModVal!=="boolean"){buffer=modVal;modVal=modName;modName=elem;elem=undefined}}else if(typeOfModName!=="undefined"){buffer=modName;modName=undefined}else if(elem&&typeof elem!=="string"){buffer=elem;elem=undefined}if(!(elem||modName||buffer)){return block}var res=buffer||[];elem?buildElemClass(block,elem,modName,modVal,res):buildBlockClass(block,modName,modVal,res);return buffer?res:res.join("")},buildModsClasses:function(block,elem,mods,buffer){var res=buffer||[];if(mods){var modName;for(modName in mods){if(!mods.hasOwnProperty(modName))continue;var modVal=mods[modName];if(modVal==null)continue;modVal=mods[modName];typeof modVal!=="boolean"&&(modVal+="");if(!modVal)continue;res.push(" ");if(elem){buildElemClass(block,elem,modName,modVal,res)}else{buildBlockClass(block,modName,modVal,res)}}}return buffer?res:res.join("")},buildClasses:function(block,elem,mods,buffer){var res=buffer||[];elem?buildElemClass(block,elem,undefined,undefined,res):buildBlockClass(block,undefined,undefined,res);this.buildModsClasses(block,elem,mods,buffer);return buffer?res:res.join("")}}}(BEM_);var ts={'"':"&quot;","&":"&amp;","<":"&lt;",">":"&gt;"},f=function(t){return ts[t]||t};var buildEscape=function(r){r=new RegExp(r,"g");return function(s){return(""+s).replace(r,f)}};function BEMContext(context,apply_){this.ctx=typeof context===null?"":context;this.apply=apply_;this._buf=[];this._=this;this._start=true;this._mode="";this._listLength=0;this._notNewList=false;this.position=0;this.block=undefined;this.elem=undefined;this.mods=undefined;this.elemMods=undefined}BEMContext.prototype.isArray=isArray;BEMContext.prototype.isSimple=function isSimple(obj){var t=typeof obj;return t==="string"||t==="number"||t==="boolean"};BEMContext.prototype.isShortTag=function isShortTag(t){return SHORT_TAGS.hasOwnProperty(t)};BEMContext.prototype.extend=function extend(o1,o2){if(!o1||!o2)return o1||o2;var res={},n;for(n in o1)o1.hasOwnProperty(n)&&(res[n]=o1[n]);for(n in o2)o2.hasOwnProperty(n)&&(res[n]=o2[n]);return res};var cnt=0,id=+new Date,expando="__"+id,get=function(){return"uniq"+id+ ++cnt};BEMContext.prototype.identify=function(obj,onlyGet){if(!obj)return get();if(onlyGet||obj[expando])return obj[expando];else return obj[expando]=get()};BEMContext.prototype.xmlEscape=buildEscape("[&<>]");BEMContext.prototype.attrEscape=buildEscape('["&<>]');BEMContext.prototype.BEM=BEM_;BEMContext.prototype.isFirst=function isFirst(){return this.position===1};BEMContext.prototype.isLast=function isLast(){return this.position===this._listLength};BEMContext.prototype.generateId=function generateId(){return this.identify(this.ctx)};var oldApply=exports.apply;exports.apply=BEMContext.apply=function _apply(context){var ctx=new BEMContext(context||this,oldApply);ctx.apply();return ctx._buf.join("")};BEMContext.prototype.reapply=BEMContext.apply}].forEach(function(fn){fn(exports,this)},{recordExtensions:function(ctx){ctx._buf=undefined;ctx._mode=undefined;ctx.ctx=undefined;ctx._notNewList=undefined;ctx.position=undefined;ctx._listLength=undefined;ctx.block=undefined;ctx.elem=undefined;ctx.__$a=0;ctx._currBlock=undefined;ctx.mods=undefined;ctx.elemMods=undefined;ctx._ieCommented=undefined;ctx.__$anflg1=false}});function __$b1(__$ctx,__$ref){__$ctx.__$a=0;{var _$sctx__$0=__$ctx.ctx,_$sprops__$1=["title","target"],_$sp__$2=typeof _$sctx__$0.url,_$sa__$3={href:_$sp__$2==="undefined"||_$sp__$2==="string"?_$sctx__$0.url:(_$sp__$2=[],function(){var __$r__$4;var __$l0__$5=__$ctx._buf;__$ctx._buf=_$sp__$2;var __$l1__$6=__$ctx._mode;__$ctx._mode="";var __$l2__$7=__$ctx.ctx;__$ctx.ctx=_$sctx__$0.url;__$r__$4=applyc(__$ctx,__$ref);__$ctx._buf=__$l0__$5;__$ctx._mode=__$l1__$6;__$ctx.ctx=__$l2__$7;return __$r__$4}(),_$sp__$2.join(""))};while(_$sp__$2=_$sprops__$1.pop()){_$sctx__$0[_$sp__$2]&&(_$sa__$3[_$sp__$2]=_$sctx__$0[_$sp__$2])}return _$sa__$3}return}function __$b2(__$ctx,__$ref){__$ctx.__$a=0;var attrs__$8={},ctx__$9=__$ctx.ctx,url__$10=ctx__$9.url,typeOfUrl__$11=typeof url__$10;typeOfUrl__$11!=="undefined"&&(attrs__$8.href=typeOfUrl__$11==="string"?url__$10:BEMHTML.apply(url__$10));ctx__$9.title&&(attrs__$8.title=ctx__$9.title);ctx__$9.target&&(attrs__$8.target=ctx__$9.target);return attrs__$8}function __$b59(__$ctx,__$ref){__$ctx.__$a=0;var _this__$12=__$ctx,BEM___$13=_this__$12.BEM,v__$14=__$ctx.ctx,buf__$15=__$ctx._buf,tag__$16;var __$r__$17;var __$l14__$18=__$ctx._mode;__$ctx._mode="tag";__$r__$17=applyc(__$ctx,__$ref);__$ctx._mode=__$l14__$18;tag__$16=__$r__$17;typeof tag__$16!="undefined"||(tag__$16=v__$14.tag);typeof tag__$16!="undefined"||(tag__$16="div");if(tag__$16){var jsParams__$19,js__$20;if(__$ctx.block&&v__$14.js!==false){var __$r__$21;var __$l6__$22=__$ctx._mode;__$ctx._mode="js";__$r__$21=applyc(__$ctx,__$ref);__$ctx._mode=__$l6__$22;js__$20=__$r__$21;js__$20=js__$20?__$ctx._.extend(v__$14.js,js__$20===true?{}:js__$20):v__$14.js===true?{}:v__$14.js;js__$20&&((jsParams__$19={})[BEM___$13.INTERNAL.buildClass(__$ctx.block,v__$14.elem)]=js__$20)}buf__$15.push("<",tag__$16);var __$r__$24;var __$l7__$25=__$ctx._mode;__$ctx._mode="bem";__$r__$24=applyc(__$ctx,__$ref);__$ctx._mode=__$l7__$25;var isBEM__$23=__$r__$24;typeof isBEM__$23!="undefined"||(isBEM__$23=typeof v__$14.bem!="undefined"?v__$14.bem:v__$14.block||v__$14.elem);var __$r__$27;var __$l8__$28=__$ctx._mode;__$ctx._mode="cls";__$r__$27=applyc(__$ctx,__$ref);__$ctx._mode=__$l8__$28;var cls__$26=__$r__$27;cls__$26||(cls__$26=v__$14.cls);var addJSInitClass__$29=v__$14.block&&jsParams__$19;if(isBEM__$23||cls__$26){buf__$15.push(' class="');if(isBEM__$23){BEM___$13.INTERNAL.buildClasses(__$ctx.block,v__$14.elem,v__$14.elemMods||v__$14.mods,buf__$15);var __$r__$31;var __$l9__$32=__$ctx._mode;__$ctx._mode="mix";__$r__$31=applyc(__$ctx,__$ref);__$ctx._mode=__$l9__$32;var mix__$30=__$r__$31;v__$14.mix&&(mix__$30=mix__$30?mix__$30.concat(v__$14.mix):v__$14.mix);if(mix__$30){var visited__$33={};function visitedKey__$34(block,elem){return(block||"")+"__"+(elem||"")}visited__$33[visitedKey__$34(__$ctx.block,__$ctx.elem)]=true;if(!__$ctx._.isArray(mix__$30))mix__$30=[mix__$30];for(var i__$35=0;i__$35<mix__$30.length;i__$35++){var mixItem__$36=mix__$30[i__$35],hasItem__$37=mixItem__$36.block||mixItem__$36.elem,block__$38=mixItem__$36.block||mixItem__$36._block||_this__$12.block,elem__$39=mixItem__$36.elem||mixItem__$36._elem||_this__$12.elem;hasItem__$37&&buf__$15.push(" ");BEM___$13.INTERNAL[hasItem__$37?"buildClasses":"buildModsClasses"](block__$38,mixItem__$36.elem||mixItem__$36._elem||(mixItem__$36.block?undefined:_this__$12.elem),mixItem__$36.elemMods||mixItem__$36.mods,buf__$15);if(mixItem__$36.js){(jsParams__$19||(jsParams__$19={}))[BEM___$13.INTERNAL.buildClass(block__$38,mixItem__$36.elem)]=mixItem__$36.js===true?{}:mixItem__$36.js;addJSInitClass__$29||(addJSInitClass__$29=block__$38&&!mixItem__$36.elem)}if(hasItem__$37&&!visited__$33[visitedKey__$34(block__$38,elem__$39)]){visited__$33[visitedKey__$34(block__$38,elem__$39)]=true;var __$r__$41;var __$l10__$42=__$ctx._mode;__$ctx._mode="mix";var __$l11__$43=__$ctx.block;__$ctx.block=block__$38;var __$l12__$44=__$ctx.elem;__$ctx.elem=elem__$39;__$r__$41=applyc(__$ctx,__$ref);__$ctx._mode=__$l10__$42;__$ctx.block=__$l11__$43;__$ctx.elem=__$l12__$44;var nestedMix__$40=__$r__$41;if(nestedMix__$40){for(var j__$45=0;j__$45<nestedMix__$40.length;j__$45++){var nestedItem__$46=nestedMix__$40[j__$45];if(!nestedItem__$46.block&&!nestedItem__$46.elem||!visited__$33[visitedKey__$34(nestedItem__$46.block,nestedItem__$46.elem)]){nestedItem__$46._block=block__$38;nestedItem__$46._elem=elem__$39;mix__$30.splice(i__$35+1,0,nestedItem__$46)}}}}}}}cls__$26&&buf__$15.push(isBEM__$23?" ":"",cls__$26);addJSInitClass__$29&&buf__$15.push(" i-bem");buf__$15.push('"')}if(isBEM__$23&&jsParams__$19){buf__$15.push(' data-bem="',__$ctx._.attrEscape(JSON.stringify(jsParams__$19)),'"')}var __$r__$48;var __$l13__$49=__$ctx._mode;__$ctx._mode="attrs";__$r__$48=applyc(__$ctx,__$ref);__$ctx._mode=__$l13__$49;var attrs__$47=__$r__$48;attrs__$47=__$ctx._.extend(attrs__$47,v__$14.attrs);if(attrs__$47){var name__$50,attr__$51;for(name__$50 in attrs__$47){attr__$51=attrs__$47[name__$50];if(attr__$51===undefined)continue;buf__$15.push(" ",name__$50,'="',__$ctx._.attrEscape(__$ctx._.isSimple(attr__$51)?attr__$51:__$ctx.reapply(attr__$51)),'"')}}}if(__$ctx._.isShortTag(tag__$16)){buf__$15.push("/>")}else{tag__$16&&buf__$15.push(">");var __$r__$53;var __$l0__$54=__$ctx._mode;__$ctx._mode="content";__$r__$53=applyc(__$ctx,__$ref);__$ctx._mode=__$l0__$54;var content__$52=__$r__$53;if(content__$52||content__$52===0){var isBEM__$23=__$ctx.block||__$ctx.elem;var __$r__$55;var __$l1__$56=__$ctx._mode;__$ctx._mode="";var __$l2__$57=__$ctx._notNewList;__$ctx._notNewList=false;var __$l3__$58=__$ctx.position;__$ctx.position=isBEM__$23?1:__$ctx.position;var __$l4__$59=__$ctx._listLength;__$ctx._listLength=isBEM__$23?1:__$ctx._listLength;var __$l5__$60=__$ctx.ctx;__$ctx.ctx=content__$52;__$r__$55=applyc(__$ctx,__$ref);__$ctx._mode=__$l1__$56;__$ctx._notNewList=__$l2__$57;__$ctx.position=__$l3__$58;__$ctx._listLength=__$l4__$59;__$ctx.ctx=__$l5__$60}tag__$16&&buf__$15.push("</",tag__$16,">")}return}function __$b60(__$ctx,__$ref){__$ctx.__$a=0;{var _$lie__$83=__$ctx.ctx.ie;if(_$lie__$83===true){var __$r__$84;var __$l0__$85=__$ctx._mode;__$ctx._mode="";var __$l1__$86=__$ctx.ctx;__$ctx.ctx=[6,7,8,9].map(function(v){return{elem:"css",url:this.ctx.url+".ie"+v+".css",ie:"IE "+v}},__$ctx);applyc(__$ctx,__$ref);__$r__$84=undefined;__$ctx._mode=__$l0__$85;__$ctx.ctx=__$l1__$86;undefined}else{var _$lhideRule__$87=!_$lie__$83?["gt IE 9","<!-->","<!--"]:_$lie__$83==="!IE"?[_$lie__$83,"<!-->","<!--"]:[_$lie__$83,"",""];var __$r__$88;var __$l2__$89=__$ctx._mode;__$ctx._mode="";var __$l5__$90=__$ctx.ctx;var __$l3__$91=__$l5__$90._ieCommented;__$l5__$90._ieCommented=true;var __$l4__$92=__$ctx.ctx;__$ctx.ctx=["<!--[if "+_$lhideRule__$87[0]+"]>",_$lhideRule__$87[1],__$ctx.ctx,_$lhideRule__$87[2],"<![endif]-->"];applyc(__$ctx,__$ref);__$r__$88=undefined;__$ctx._mode=__$l2__$89;__$l5__$90._ieCommented=__$l3__$91;__$ctx.ctx=__$l4__$92;undefined}}return}function __$b61(__$ctx,__$ref){__$ctx.__$a=0;var url__$93=__$ctx.ctx.url;var __$r__$94;var __$l0__$95=__$ctx._mode;__$ctx._mode="";var __$l1__$96=__$ctx.ctx;__$ctx.ctx=[6,7,8,9].map(function(v){return{elem:"css",url:url__$93+".ie"+v+".css",ie:"IE "+v}});var __$r__$97;__$ctx.__$a=2;__$r__$97=applyc(__$ctx,__$ref);__$r__$94=__$r__$97;__$ctx._mode=__$l0__$95;__$ctx.ctx=__$l1__$96;return}function __$b62(__$ctx,__$ref){__$ctx.__$a=0;var ie__$98=__$ctx.ctx.ie;var hideRule__$99=!ie__$98?["gt IE 9","<!-->","<!--"]:ie__$98==="!IE"?[ie__$98,"<!-->","<!--"]:[ie__$98,"",""];var __$r__$100;var __$l0__$101=__$ctx._mode;__$ctx._mode="";var __$l3__$102=__$ctx.ctx;var __$l1__$103=__$l3__$102._ieCommented;__$l3__$102._ieCommented=true;var __$l2__$104=__$ctx.ctx;__$ctx.ctx=["<!--[if "+hideRule__$99[0]+"]>"+hideRule__$99[1],__$ctx.ctx,hideRule__$99[2]+"<![endif]-->"];__$r__$100=applyc(__$ctx,__$ref);__$ctx._mode=__$l0__$101;__$l3__$102._ieCommented=__$l1__$103;__$ctx.ctx=__$l2__$104;return}function __$b63(__$ctx,__$ref){__$ctx.__$a=0;{var _$5ctx__$105=__$ctx.ctx,_$5dtype__$106=function(){var __$r__$107;var __$l0__$108=__$ctx._mode;__$ctx._mode="doctype";__$r__$107=applyc(__$ctx,__$ref);__$ctx._mode=__$l0__$108;return __$r__$107}(),_$5xUA__$109=function(){var __$r__$110;var __$l1__$111=__$ctx._mode;__$ctx._mode="xUACompatible";__$r__$110=applyc(__$ctx,__$ref);__$ctx._mode=__$l1__$111;return __$r__$110}(),_$5buf__$112=[_$5dtype__$106,{elem:"root",content:[{elem:"head",content:[{tag:"meta",attrs:{charset:"utf-8"}},_$5xUA__$109,{tag:"title",content:_$5ctx__$105.title},_$5ctx__$105.favicon?{elem:"favicon",url:_$5ctx__$105.favicon}:"",_$5ctx__$105.meta,{block:"i-ua"},_$5ctx__$105.head]},_$5ctx__$105]}];var __$r__$113;var __$l2__$114=__$ctx.__$anflg1;__$ctx.__$anflg1=true;var __$r__$115;var __$l3__$116=__$ctx.ctx;__$ctx.ctx=_$5buf__$112;var __$l4__$117=__$ctx._mode;__$ctx._mode="";applyc(__$ctx,__$ref);__$r__$115=undefined;__$ctx.ctx=__$l3__$116;__$ctx._mode=__$l4__$117;__$r__$113=undefined;__$ctx.__$anflg1=__$l2__$114;undefined}return}function __$b64(__$ctx,__$ref){__$ctx.__$a=0;var ctx__$121=__$ctx.ctx;ctx__$121._wrapped=true;var __$r__$122;var __$l0__$123=__$ctx._mode;__$ctx._mode="";var __$l1__$124=__$ctx.ctx;__$ctx.ctx=[function(){var __$r__$125;var __$l3__$126=__$ctx._mode;__$ctx._mode="doctype";__$r__$125=applyc(__$ctx,__$ref);__$ctx._mode=__$l3__$126;return __$r__$125}(),{elem:"root",content:[{elem:"head",content:[{tag:"meta",attrs:{charset:"utf-8"}},{tag:"title",content:ctx__$121.title},function(){var __$r__$127;var __$l4__$128=__$ctx._mode;__$ctx._mode="head";__$r__$127=applyc(__$ctx,__$ref);__$ctx._mode=__$l4__$128;return __$r__$127}(),ctx__$121.favicon?{elem:"favicon",url:ctx__$121.favicon}:""]},ctx__$121]}];var __$r__$129;__$ctx.__$a=4;__$r__$129=applyc(__$ctx,__$ref);__$r__$122=__$r__$129;__$ctx._mode=__$l0__$123;__$ctx.ctx=__$l1__$124;return}function __$b65(__$ctx,__$ref){__$ctx.__$a=0;var __$r__$61;var __$l0__$62=__$ctx._mode;__$ctx._mode="";var __$l1__$63=__$ctx.ctx;__$ctx.ctx=__$ctx.ctx._res;var __$r__$64;__$ctx.__$a=1;__$r__$64=applyc(__$ctx,__$ref);__$r__$61=__$r__$64;__$ctx._mode=__$l0__$62;__$ctx.ctx=__$l1__$63;return}function __$b66(__$ctx,__$ref){__$ctx.__$a=0;__$ctx._listLength--;var ctx__$65=__$ctx.ctx;(ctx__$65&&ctx__$65!==true||ctx__$65===0)&&__$ctx._buf.push(ctx__$65);return}function __$b67(__$ctx,__$ref){__$ctx.__$a=0;__$ctx._listLength--;return}function __$b68(__$ctx,__$ref){__$ctx.__$a=0;var v__$66=__$ctx.ctx,l__$67=v__$66.length,i__$68=0,prevPos__$69=__$ctx.position,prevNotNewList__$70=__$ctx._notNewList;if(prevNotNewList__$70){__$ctx._listLength+=l__$67-1}else{__$ctx.position=0;__$ctx._listLength=l__$67}__$ctx._notNewList=true;while(i__$68<l__$67)!function(){var __$r__$71;var __$l0__$72=__$ctx.ctx;__$ctx.ctx=v__$66[i__$68++];__$r__$71=applyc(__$ctx,__$ref);__$ctx.ctx=__$l0__$72;return __$r__$71}();prevNotNewList__$70||(__$ctx.position=prevPos__$69);return}function __$b69(__$ctx,__$ref){__$ctx.__$a=0;var vBlock__$73=__$ctx.ctx.block,vElem__$74=__$ctx.ctx.elem,block__$75=__$ctx._currBlock||__$ctx.block;__$ctx.ctx||(__$ctx.ctx={});var __$r__$76;var __$l0__$77=__$ctx._mode;__$ctx._mode="default";var __$l1__$78=__$ctx.block;__$ctx.block=vBlock__$73||(vElem__$74?block__$75:undefined);var __$l2__$79=__$ctx._currBlock;__$ctx._currBlock=vBlock__$73||vElem__$74?undefined:block__$75;var __$l3__$80=__$ctx.elem;__$ctx.elem=__$ctx.ctx.elem;var __$l4__$81=__$ctx.mods;__$ctx.mods=(vBlock__$73?__$ctx.ctx.mods:__$ctx.mods)||{};var __$l5__$82=__$ctx.elemMods;__$ctx.elemMods=__$ctx.ctx.elemMods||{};__$ctx.block||__$ctx.elem?__$ctx.position=(__$ctx.position||0)+1:__$ctx._listLength--;applyc(__$ctx,__$ref);__$r__$76=undefined;__$ctx._mode=__$l0__$77;__$ctx.block=__$l1__$78;__$ctx._currBlock=__$l2__$79;__$ctx.elem=__$l3__$80;__$ctx.mods=__$l4__$81;__$ctx.elemMods=__$l5__$82;return}function __$g0(__$ctx,__$ref){var __$t=__$ctx.block;if(__$t==="link"){if(!__$ctx.elem){__$ctx.__$a=0;var __$r=__$b1(__$ctx,__$ref);if(__$r!==__$ref)return __$r}if(!__$ctx.elem){__$ctx.__$a=0;var __$r=__$b2(__$ctx,__$ref);if(__$r!==__$ref)return __$r}}__$ctx.__$a=0;return undefined;var __$t=__$ctx.block;if(__$t==="page"){var __$t=__$ctx.elem;if(__$t==="js"){var __$t=__$ctx.ctx.url;if(__$t){__$ctx.__$a=0;return{src:__$ctx.ctx.url};__$ctx.__$a=0;return{src:__$ctx.ctx.url}}}else if(__$t==="css"){var __$t=__$ctx.ctx.url;if(__$t){__$ctx.__$a=0;return{rel:"stylesheet",href:__$ctx.ctx.url};__$ctx.__$a=0;return{rel:"stylesheet",href:__$ctx.ctx.url}}}else if(__$t==="favicon"){__$ctx.__$a=0;return{rel:"shortcut icon",href:__$ctx.ctx.url};__$ctx.__$a=0;return{rel:"shortcut icon",href:__$ctx.ctx.url}}else if(__$t==="meta"){__$ctx.__$a=0;return __$ctx.ctx.attrs}}return __$ref}function __$g1(__$ctx,__$ref){var __$t=__$ctx.elem;if(__$t==="js"){__$ctx.__$a=0;return"script";__$ctx.__$a=0;return"script"}else if(__$t==="css"){if(__$ctx.ctx.url){__$ctx.__$a=0;return"link"}__$ctx.__$a=0;return"style";if(__$ctx.ctx.url){__$ctx.__$a=0;return"link"}__$ctx.__$a=0;return"style"}else if(__$t==="favicon"){__$ctx.__$a=0;return"link"}else if(__$t==="meta"){__$ctx.__$a=0;return"meta"}else if(__$t==="head"){__$ctx.__$a=0;return"head"}else if(__$t==="root"){__$ctx.__$a=0;return"html"}if(!__$ctx.elem){__$ctx.__$a=0;return"body"}var __$t=__$ctx.elem;if(__$t==="link"){__$ctx.__$a=0;return"link"}else if(__$t==="favicon"){__$ctx.__$a=0;return"link"}else if(__$t==="meta"){__$ctx.__$a=0;return"meta"}else if(__$t==="head"){__$ctx.__$a=0;return"head"}else if(__$t==="root"){__$ctx.__$a=0;return"html"}if(!__$ctx.elem){__$ctx.__$a=0;return"body"}return __$ref}function __$g2(__$ctx,__$ref){var __$t=__$ctx.elem;if(__$t==="link"){__$ctx.__$a=0;return false}else if(__$t==="js"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}else if(__$t==="css"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}else if(__$t==="favicon"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}else if(__$t==="meta"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}else if(__$t==="head"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}else if(__$t==="root"){__$ctx.__$a=0;return false;__$ctx.__$a=0;return false}return __$ref}function __$g3(__$ctx,__$ref){__$ctx.__$a=0;var __$r=__$b59(__$ctx,__$ref);if(__$r!==__$ref)return __$r;var __$t=__$ctx.block;if(__$t==="page"){var __$t=__$ctx.elem;if(__$t==="css"){if(__$ctx.ctx.hasOwnProperty("ie")&&!__$ctx.ctx._ieCommented){__$ctx.__$a=0;var __$r=__$b60(__$ctx,__$ref);if(__$r!==__$ref)return __$r}var __$t=!__$ctx.ctx._ieCommented;if(__$t){var __$t=__$ctx.ctx.hasOwnProperty("ie");if(__$t){if(__$ctx.ctx.ie===true&&__$ctx.__$a!==2){__$ctx.__$a=0;var __$r=__$b61(__$ctx,__$ref);if(__$r!==__$ref)return __$r}__$ctx.__$a=0;var __$r=__$b62(__$ctx,__$ref);if(__$r!==__$ref)return __$r}}}if(!__$ctx.elem&&__$ctx["__$anflg1"]!==true){__$ctx.__$a=0;var __$r=__$b63(__$ctx,__$ref);if(__$r!==__$ref)return __$r}if(!__$ctx.elem&&!__$ctx.ctx._wrapped&&__$ctx.__$a!==4){__$ctx.__$a=0;var __$r=__$b64(__$ctx,__$ref);if(__$r!==__$ref)return __$r}}return __$ref};
     return exports;
  })({});
  var defineAsGlobal = true;
  if(typeof exports === "object") {
    exports["BEMHTML"] = __xjst;
    defineAsGlobal = false;
  }
  if(typeof modules === "object") {
    modules.define("BEMHTML", function(provide) { provide(__xjst) });
    defineAsGlobal = false;
  }
  defineAsGlobal && (g["BEMHTML"] = __xjst);
})(this);
